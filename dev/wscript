########################################################################################
# All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
# its licensors.
#
# For complete copyright and license terms please see the LICENSE at the root of this
# distribution (the "License"). All use of this software is governed by the License,
# or, if provided, by the license below or the license accompanying this file. Do not
# remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
#
# Original file Copyright Crytek GMBH or its affiliates, used under license.
#
########################################################################################

import sys

# you can uncomment this to make debugging build command lines easier.
#sys.stdout.write('[WAF] Command line: ' + str(sys.argv))

import os

from waflib import Configure, Logs, Utils, Options, ConfigSet
from waflib.Build import BuildContext, CleanContext, Context

from waflib.Tools import c_aliases, c
from waflib.Task import Task, RUN_ME, SKIP_ME
from waflib.Configure import conf, ConfigurationContext
from waflib.Errors import BuildError, WafError

# Attempt to import the aztest module
try:
    import aztest
    AZ_TEST_SUPPORTED=True
except ImportError:
    AZ_TEST_SUPPORTED=False
    pass

BUILD_METRICS_SUPPORTED=False
METRICS_NAMESPACE=None
try:
    if '--enable-build-metrics' in sys.argv:
        from build_metrics import build_metrics_reporter, build_metrics_overrides

        if not build_metrics_reporter.metric_reporter.parse_command_line(sys.argv):
             Logs.error('--metrics-namespace must be set when metrics is enabled.  Metrics will not be generated for this build.')
        else:
            BUILD_METRICS_SUPPORTED=True
            METRICS_NAMESPACE=build_metrics_reporter.metric_reporter.metrics_namespace

            build_metrics_reporter.start_metric_reporter()

except Exception:
    import traceback
    print traceback.print_exc()

# Load globals from branch spec file if we must
from waf_branch_spec import SUBFOLDERS, PLATFORM_CONFIGURATION_FILTER, MONOLITHIC_BUILDS

###############################################################################
Configure.autoconfig = True

###############################################################################
CRY_WAF_TOOL_DIR='Tools/build/waf-1.7.13/lmbrwaflib'

###############################################################################
CURRENT_WAF_EXECUTABLE = ''

try:
    CURRENT_WAF_EXECUTABLE = '{0} ./Code/Tools/waf-1.7.13/lmbr_waf'.format(os.path.relpath(sys.executable))
except ValueError:
    # this can happen if your exe is on a different drive on windows.
    CURRENT_WAF_EXECUTABLE = '{0} ./Code/Tools/waf-1.7.13/lmbr_waf'.format(sys.executable)
    
USE_LOCAL_PYTHON = not sys.executable.startswith(os.getcwd())


###############################################################################

# Configure Options for WAF
def options(opt):
    opt.load('vscode', tooldir=CRY_WAF_TOOL_DIR)
    # Load the lmbr waf modules
    opt.load('lumberyard', tooldir=CRY_WAF_TOOL_DIR)
    opt.load_lmbr_general_modules()

    # Add additional options
    opt.add_lmbr_waf_options(AZ_TEST_SUPPORTED)

    # Lastly, load data driven settings
    opt.load_lmbr_data_driven_modules()

###############################################################################
## Configure 'configure' step
def configure(conf):
    conf.load_user_settings()

    # Run the WAF configure workflow
    conf.configure_settings()

    conf.run_bootstrap()

    conf.add_game_projects_to_specs()

    conf.add_gems_to_specs()

    conf.filter_target_platforms()

    conf.load_compile_rules_for_supported_platforms(PLATFORM_CONFIGURATION_FILTER)

    conf.update_validated_platforms()

    conf.process_custom_configure_commands()

    # Recurse into sub-folders for auto conf when any wscript changes
    conf.recurse(dirs=SUBFOLDERS)

    conf.configure_game_projects()

    conf.process_gems()

    if conf.options.update_user_settings == 'True':
        conf.update_settings_options_file()

    conf.clear_waf_timestamp_files()
        

def post_command_exec(bld):
    # [post project gen]
    if bld.cmd == 'msvs':
        project_gen_timestamp = bld.get_bintemp_folder_node().make_node('project_gen.timestamp')
        project_gen_timestamp.write('')
    # [post uberfile gen]
    elif bld.cmd == 'generate_uber_files':
        generate_uber_files_timestamp = bld.get_bintemp_folder_node().make_node('generate_uber_files.timestamp')
        generate_uber_files_timestamp.write('')
    # [post build]
    elif bld.cmd.startswith('build'):
        for message in bld.post_build_msg_info:
            Logs.info(message)

        for message in bld.post_build_msg_warning:
            Logs.warn(message)

        for message in bld.post_build_msg_error:
            Logs.error(message)

stored_file_filter = ''
stored_output_file = ''


###############################################################################
# Run 'build' step
def build(bld):
    if BUILD_METRICS_SUPPORTED:
        build_metrics_reporter.add_output_directory(bld.get_variant_dir())

    if not isinstance(bld, BuildContext):
        bld.fatal("[Error] Invalid build command: '{}'.  Type in '{} --help' for more information"
                  .format(bld.cmd if hasattr(bld, 'cmd') else str(bld), CURRENT_WAF_EXECUTABLE))

    bld.validate_build_command()

    #If the user wants to build a monolithic build for Mac add the platform to the list
    if bld.is_option_true('mac_build_monolithic'):
        MONOLITHIC_BUILDS.append( 'darwin')

    bld.load_user_settings()

    bld.options.project_spec = bld.options.project_spec.strip()  # remove spaces

    # Create a post build message container
    bld.post_build_msg_info = []
    bld.post_build_msg_warning = []
    bld.post_build_msg_error = []

    bld.add_group('az_code_gen_group')
    bld.add_group('regular_group')
    bld.set_group('regular_group')

    bld.add_gems_to_specs()
    bld.add_game_projects_to_specs()

    if not bld.check_special_command_timestamps():
        return

    bld.prepare_build_environment()

    # Check conditionally loaded modules
    bld.check_module_load_options()

    ###########################################
    # Check if we need to start ourself recursively for IB
    if bld.invoke_waf_recursively(USE_LOCAL_PYTHON, BUILD_METRICS_SUPPORTED, METRICS_NAMESPACE):
        if BUILD_METRICS_SUPPORTED:
            # we don't need anymore metrics from this build, so stop the reporter
            build_metrics_reporter.stop_metric_reporter()
        return

    ###########################################
    bld.add_post_fun(post_command_exec)

    ###########################################
    # Load configuration overwrites
    bld.env['CONFIG_OVERWRITES'] = bld.get_solution_overrides()

    # Load Core Engine Parts (Engine, Tools, Core Shaders etc)
    bld.game_project = None

    bld.recurse(SUBFOLDERS)

    bld.process_gems()

    if Utils.unversioned_sys_platform() != 'linux' and bld.env['CONFIGURATION'] != 'project_generator':
        # Only attempt to bootstrap Qt if the host is not linux
        bld.qtlib_bootstrap(bld.env['PLATFORM'], bld.env['CONFIGURATION'])

    bld.setup_game_projects()

    # Save current build environment so that later commands in a chain can make use of the information (ex. run_tests)
    if 'build' in bld.cmd:
        bld.env.store(os.path.join(bld.cache_dir, 'last_build_cache.py'))

def deploy(ctx):
    if not ctx.variant:
        ctx.fatal('Deploy task does not have a variant specified, cannot continue')
    if not hasattr(ctx, 'features') or ctx.features is None:
        ctx.fatal('Deploy task does not have any deployment features attached to it')
    (platform, configuration) = ctx.get_platform_and_configuration()
    ctx.env['PLATFORM'] = platform
    ctx.env['CONFIGURATION'] = configuration
    ctx(features=ctx.features)



###############################################################################
def show_option_dialog(ctx):
    ctx.gui_modify_user_options()


###############################################################################
class execute_waf_options_dialog(BuildContext):
    ''' Util class to execute waf options dialog  '''
    cmd = 'show_option_dialog'
    fun = 'show_option_dialog'


###############################################################################
if AZ_TEST_SUPPORTED:
    def run_tests(ctx):
        """ Runs tests using the AzTestScanner """
        # Start by grabbing the full args from command line
        args = ['scan']
        if ctx.options.test_params:
            args += ctx.options.test_params.split()

        # Convenience function to check for flags in args
        def has_params(args, *params):
            return any(x in args for x in params)

        # If we are chaining, we want the cached info from the last build command
        # We do not override parameters that are passed in by the user (ex. the dir to test)
        ctx.env.load(os.path.join(ctx.cache_dir, 'last_build_cache.py'))
        if not has_params(args, '-d', '--dir'):
            args += ['--dir', ctx.get_output_folders(ctx.env['PLATFORM'], ctx.env['CONFIGURATION'])[0].abspath()]
        if not has_params(args, 'o', '--only') and ctx.options.targets:
            args += ['--only', ctx.options.targets]

        aztest.execute(args)


    class RunTestsContext(BuildContext):
        cmd = 'run_tests'
        fun = 'run_tests'


def wrap_execute(execute_method):
    """
    Decorator used to set the commands that can be configured automatically

    :param execute_method:     The method to execute
    """
    def execute(self):
        # Make sure to create all needed temp folders
        bin_temp = self.get_bintemp_folder_node()
        bin_temp.mkdir()
        tmp_files_folder = bin_temp.make_node('TempFiles')
        tmp_files_folder.mkdir()

        # Before executing any build or configure commands, check for config file
        # and for bootstrap updates
        self.load_user_settings()

        if getattr(self, "do_auto_configure", None):
            if self.do_auto_configure():
                return

        return execute_method(self)
    return execute

BuildContext.execute = wrap_execute(BuildContext.execute)
ConfigurationContext.execute = wrap_execute(ConfigurationContext.execute)
