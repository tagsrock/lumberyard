/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// THIS CODE IS AUTOGENERATED, DO NOT MODIFY
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////

#pragma once
#include <AzCore/Component/Component.h>
#include <AzCore/Component/Entity.h>
#include <AzCore/Component/ComponentBus.h>
#include <AzCore/EBus/EBus.h>
#include <AzCore/Memory/SystemAllocator.h>
#include <AzCore/RTTI/BehaviorContext.h>
#include <AzCore/Serialization/EditContext.h>
#include <AzCore/Serialization/SerializeContext.h>
#include <AzCore/std/smart_ptr/make_shared.h>
#include <AzCore/std/smart_ptr/shared_ptr.h>
#include <AzCore/std/string/conversions.h>

#if defined (PLATFORM_SUPPORTS_AWS_NATIVE_SDK)
#include <aws/core/http/HttpRequest.h>
#include <aws/core/http/HttpResponse.h>
#endif // (PLATFORM_SUPPORTS_AWS_NATIVE_SDK)

#include <LmbrAWS/ILmbrAWS.h>

#include <CloudGemFramework/ServiceRequestJob.h>

#include "StdAfx.h"

namespace CloudGemMessageOfTheDay {
namespace ServiceAPI {

    const char* LmbrAWS_CodeGen_MessageList_UUID= "{ec889bb5-c329-11e6-89d0-80a589a02a3d}";

    const char* LmbrAWS_CodeGen_PutAdminMessagesReturnType_UUID= "{ec889bb0-c329-11e6-b753-80a589a02a3d}";

    const char* LmbrAWS_CodeGen_Component_UUID= "{ec8874a1-c329-11e6-accd-80a589a02a3d}";

    const char* LmbrAWS_CodeGen_ResponseHandler_UUID= "{ec8874a4-c329-11e6-a067-80a589a02a3d}";

    const char* LmbrAWS_CodeGen_NotificationBus1_UUID= "{ec8874a2-c329-11e6-a661-80a589a02a3d}";

    const char* LmbrAWS_CodeGen_RequestBus1_UUID= "{ec8874a3-c329-11e6-a1e9-80a589a02a3d}";

    const char* LmbrAWS_CodeGen_DeleteAdminMessagesReturnType_UUID= "{ec889bb1-c329-11e6-aa94-80a589a02a3d}";

    const char* LmbrAWS_CodeGen_DetailedMessageList_UUID= "{ec889bb4-c329-11e6-8650-80a589a02a3d}";

    const char* LmbrAWS_CodeGen_ServiceStatus_UUID= "{45baaccf-c88b-11e6-b813-80a589a02a3d}";

    const char* LmbrAWS_CodeGen_DetailedMessageData_UUID= "{ec889bb3-c329-11e6-bf48-80a589a02a3d}";

    const char* LmbrAWS_CodeGen_MessageData_UUID= "{ec8874a5-c329-11e6-9afb-80a589a02a3d}";


    // redefs


    bool WriteJson(CloudGemFramework::JsonWriter& writer, const int& item)
    {
        return writer.Int(item);
    }

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AZStd::string& item)
    {
        return writer.String(item);
    }

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const double& item)
    {
        return writer.Double(item);
    }



    struct MessageData
    {

        AZ_TYPE_INFO(MessageData, LmbrAWS_CodeGen_MessageData_UUID)
        AZ_CLASS_ALLOCATOR(MessageData, AZ::SystemAllocator, 0)


        int priority;

        AZStd::string message;

        AZStd::string endTime;

        AZStd::string startTime;


        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const MessageData& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();

            ok = ok && writer.Key("priority");
            ok = ok && WriteJson(writer, item.priority);

            ok = ok && writer.Key("message");
            ok = ok && WriteJson(writer, item.message);

            ok = ok && writer.Key("endTime");
            ok = ok && WriteJson(writer, item.endTime);

            ok = ok && writer.Key("startTime");
            ok = ok && WriteJson(writer, item.startTime);

            ok = ok && writer.EndObject();
            return ok;
    }



    struct PutAdminMessagesReturnType
    {

        AZ_TYPE_INFO(PutAdminMessagesReturnType, LmbrAWS_CodeGen_PutAdminMessagesReturnType_UUID)
        AZ_CLASS_ALLOCATOR(PutAdminMessagesReturnType, AZ::SystemAllocator, 0)



        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const PutAdminMessagesReturnType& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();

            ok = ok && writer.EndObject();
            return ok;
    }



    struct DeleteAdminMessagesReturnType
    {

        AZ_TYPE_INFO(DeleteAdminMessagesReturnType, LmbrAWS_CodeGen_DeleteAdminMessagesReturnType_UUID)
        AZ_CLASS_ALLOCATOR(DeleteAdminMessagesReturnType, AZ::SystemAllocator, 0)



        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const DeleteAdminMessagesReturnType& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();

            ok = ok && writer.EndObject();
            return ok;
    }



    struct DetailedMessageData
    {

        AZ_TYPE_INFO(DetailedMessageData, LmbrAWS_CodeGen_DetailedMessageData_UUID)
        AZ_CLASS_ALLOCATOR(DetailedMessageData, AZ::SystemAllocator, 0)


        int priority;

        AZStd::string message;

        AZStd::string endTime;

        AZStd::string UniqueMsgID;

        AZStd::string startTime;


        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const DetailedMessageData& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();

            ok = ok && writer.Key("priority");
            ok = ok && WriteJson(writer, item.priority);

            ok = ok && writer.Key("message");
            ok = ok && WriteJson(writer, item.message);

            ok = ok && writer.Key("endTime");
            ok = ok && WriteJson(writer, item.endTime);

            ok = ok && writer.Key("UniqueMsgID");
            ok = ok && WriteJson(writer, item.UniqueMsgID);

            ok = ok && writer.Key("startTime");
            ok = ok && WriteJson(writer, item.startTime);

            ok = ok && writer.EndObject();
            return ok;
    }



    using DetailedMessageListPropertyList = AZStd::vector<DetailedMessageData>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const DetailedMessageListPropertyList& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }



    struct DetailedMessageList
    {

        AZ_TYPE_INFO(DetailedMessageList, LmbrAWS_CodeGen_DetailedMessageList_UUID)
        AZ_CLASS_ALLOCATOR(DetailedMessageList, AZ::SystemAllocator, 0)


        DetailedMessageListPropertyList list;


        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const DetailedMessageList& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();

            ok = ok && writer.Key("list");
            ok = ok && WriteJson(writer, item.list);

            ok = ok && writer.EndObject();
            return ok;
    }



    struct ServiceStatus
    {

        AZ_TYPE_INFO(ServiceStatus, LmbrAWS_CodeGen_ServiceStatus_UUID)
        AZ_CLASS_ALLOCATOR(ServiceStatus, AZ::SystemAllocator, 0)


        AZStd::string status;


        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ServiceStatus& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();

            ok = ok && writer.Key("status");
            ok = ok && WriteJson(writer, item.status);

            ok = ok && writer.EndObject();
            return ok;
    }



    using MessageListPropertyList = AZStd::vector<MessageData>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const MessageListPropertyList& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }



    struct MessageList
    {

        AZ_TYPE_INFO(MessageList, LmbrAWS_CodeGen_MessageList_UUID)
        AZ_CLASS_ALLOCATOR(MessageList, AZ::SystemAllocator, 0)


        MessageListPropertyList list;


        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const MessageList& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();

            ok = ok && writer.Key("list");
            ok = ok && WriteJson(writer, item.list);

            ok = ok && writer.EndObject();
            return ok;
    }




    // Service RequestJobs
    CLOUD_GEM_SERVICE(CloudGemMessageOfTheDay);

    void Configure()
    {
        // Insert any necessary CloudGemFramework configuration here
    }

    class PutAdminMessagesRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemMessageOfTheDay, HttpMethod::HTTP_PUT, "/admin/messages/{msg_id}");

        struct Parameters
        {

            AZStd::string msg_id;

            MessageData msg;


            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;

                ok = ok && request.SetPathParameter("{""msg_id""}", msg_id);


                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;

                ok = ok && CloudGemMessageOfTheDay::ServiceAPI::WriteJson(writer, msg);

                return ok;
            }
        };


        PutAdminMessagesReturnType result;


        Parameters parameters;
    };


    using PutAdminMessagesRequestJob = CloudGemFramework::ServiceRequestJob<PutAdminMessagesRequest>;

    class DeleteAdminMessagesRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemMessageOfTheDay, HttpMethod::HTTP_DELETE, "/admin/messages/{msg_id}");

        struct Parameters
        {

            AZStd::string msg_id;


            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;

                ok = ok && request.SetPathParameter("{""msg_id""}", msg_id);


                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;

                return ok;
            }
        };


        DeleteAdminMessagesReturnType result;


        Parameters parameters;
    };


    using DeleteAdminMessagesRequestJob = CloudGemFramework::ServiceRequestJob<DeleteAdminMessagesRequest>;

    class PostAdminMessagesRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemMessageOfTheDay, HttpMethod::HTTP_POST, "/admin/messages");

        struct Parameters
        {

            MessageData msg;


            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;


                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;

                ok = ok && CloudGemMessageOfTheDay::ServiceAPI::WriteJson(writer, msg);

                return ok;
            }
        };


        DetailedMessageData result;


        Parameters parameters;
    };


    using PostAdminMessagesRequestJob = CloudGemFramework::ServiceRequestJob<PostAdminMessagesRequest>;

    class GetAdminMessagesRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemMessageOfTheDay, HttpMethod::HTTP_GET, "/admin/messages");

        struct Parameters
        {

            int index;

            int count;

            AZStd::string filter;


            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;


                ok = ok && request.AddQueryParameter("index", index);

                ok = ok && request.AddQueryParameter("count", count);

                ok = ok && request.AddQueryParameter("filter", filter);

                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;

                return ok;
            }
        };


        DetailedMessageList result;


        Parameters parameters;
    };


    using GetAdminMessagesRequestJob = CloudGemFramework::ServiceRequestJob<GetAdminMessagesRequest>;

    class GetServiceStatusRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemMessageOfTheDay, HttpMethod::HTTP_GET, "/service/status");

        struct Parameters
        {


            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;


                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;

                return ok;
            }
        };


        ServiceStatus result;


        Parameters parameters;
    };


    using GetServiceStatusRequestJob = CloudGemFramework::ServiceRequestJob<GetServiceStatusRequest>;

    class GetPlayerMessagesRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemMessageOfTheDay, HttpMethod::HTTP_GET, "/player/messages");

        struct Parameters
        {

            AZStd::string time;

            AZStd::string lang;


            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;


                ok = ok && request.AddQueryParameter("time", time);

                ok = ok && request.AddQueryParameter("lang", lang);

                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;

                return ok;
            }
        };


        MessageList result;


        Parameters parameters;
    };


    using GetPlayerMessagesRequestJob = CloudGemFramework::ServiceRequestJob<GetPlayerMessagesRequest>;



    // Notification bus for this component
    class CloudGemMessageOfTheDayNotifications
        : public AZ::ComponentBus
    {
    public:
        // static const bool EnableEventQueue = true;

        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */

        virtual void OnPutAdminMessagesRequestSuccess(const PutAdminMessagesReturnType response) { }


        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnPutAdminMessagesRequestError(const CloudGemFramework::Error error) { }

        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */

        virtual void OnDeleteAdminMessagesRequestSuccess(const DeleteAdminMessagesReturnType response) { }


        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnDeleteAdminMessagesRequestError(const CloudGemFramework::Error error) { }

        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */

        virtual void OnPostAdminMessagesRequestSuccess(const DetailedMessageData response) { }


        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnPostAdminMessagesRequestError(const CloudGemFramework::Error error) { }

        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */

        virtual void OnGetAdminMessagesRequestSuccess(const DetailedMessageList response) { }


        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetAdminMessagesRequestError(const CloudGemFramework::Error error) { }

        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */

        virtual void OnGetServiceStatusRequestSuccess(const ServiceStatus response) { }


        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetServiceStatusRequestError(const CloudGemFramework::Error error) { }

        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */

        virtual void OnGetPlayerMessagesRequestSuccess(const MessageList response) { }


        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetPlayerMessagesRequestError(const CloudGemFramework::Error error) { }

    };

    using CloudGemMessageOfTheDayNotificationBus = AZ::EBus<CloudGemMessageOfTheDayNotifications>;

    class BehaviorCloudGemMessageOfTheDayNotificationBusHandler
        : public CloudGemMessageOfTheDayNotificationBus::Handler, public AZ::BehaviorEBusHandler
    {
    public:
        AZ_EBUS_BEHAVIOR_BINDER(BehaviorCloudGemMessageOfTheDayNotificationBusHandler, LmbrAWS_CodeGen_NotificationBus1_UUID, AZ::SystemAllocator

        , OnPutAdminMessagesRequestSuccess
        , OnPutAdminMessagesRequestError

        , OnDeleteAdminMessagesRequestSuccess
        , OnDeleteAdminMessagesRequestError

        , OnPostAdminMessagesRequestSuccess
        , OnPostAdminMessagesRequestError

        , OnGetAdminMessagesRequestSuccess
        , OnGetAdminMessagesRequestError

        , OnGetServiceStatusRequestSuccess
        , OnGetServiceStatusRequestError

        , OnGetPlayerMessagesRequestSuccess
        , OnGetPlayerMessagesRequestError

        );


        void OnPutAdminMessagesRequestSuccess(const PutAdminMessagesReturnType response) override
        {
            Call(FN_OnPutAdminMessagesRequestSuccess, response);
        }

        void OnPutAdminMessagesRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnPutAdminMessagesRequestError, error);
        }


        void OnDeleteAdminMessagesRequestSuccess(const DeleteAdminMessagesReturnType response) override
        {
            Call(FN_OnDeleteAdminMessagesRequestSuccess, response);
        }

        void OnDeleteAdminMessagesRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnDeleteAdminMessagesRequestError, error);
        }


        void OnPostAdminMessagesRequestSuccess(const DetailedMessageData response) override
        {
            Call(FN_OnPostAdminMessagesRequestSuccess, response);
        }

        void OnPostAdminMessagesRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnPostAdminMessagesRequestError, error);
        }


        void OnGetAdminMessagesRequestSuccess(const DetailedMessageList response) override
        {
            Call(FN_OnGetAdminMessagesRequestSuccess, response);
        }

        void OnGetAdminMessagesRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnGetAdminMessagesRequestError, error);
        }


        void OnGetServiceStatusRequestSuccess(const ServiceStatus response) override
        {
            Call(FN_OnGetServiceStatusRequestSuccess, response);
        }

        void OnGetServiceStatusRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnGetServiceStatusRequestError, error);
        }


        void OnGetPlayerMessagesRequestSuccess(const MessageList response) override
        {
            Call(FN_OnGetPlayerMessagesRequestSuccess, response);
        }

        void OnGetPlayerMessagesRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnGetPlayerMessagesRequestError, error);
        }

    };
    class CloudGemMessageOfTheDayResponseHandler;

    // Request bus for this component
    class CloudGemMessageOfTheDayRequests
        : public AZ::ComponentBus
    {
    public:
        virtual ~CloudGemMessageOfTheDayRequests() {}


        virtual void PutAdminMessages(const AZStd::string& msg_id, const MessageData& msg, CloudGemMessageOfTheDayResponseHandler* responseHandler) { }



        virtual void DeleteAdminMessages(const AZStd::string& msg_id, CloudGemMessageOfTheDayResponseHandler* responseHandler) { }



        virtual void PostAdminMessages(const MessageData& msg, CloudGemMessageOfTheDayResponseHandler* responseHandler) { }



        virtual void GetAdminMessages(const int& index, const int& count, const AZStd::string& filter, CloudGemMessageOfTheDayResponseHandler* responseHandler) { }



        virtual void GetServiceStatus(CloudGemMessageOfTheDayResponseHandler* responseHandler) { }



        virtual void GetPlayerMessages(const AZStd::string& time, const AZStd::string& lang, CloudGemMessageOfTheDayResponseHandler* responseHandler) { }


    };

    using CloudGemMessageOfTheDayRequestBus = AZ::EBus<CloudGemMessageOfTheDayRequests>;

    // This class is used as a parameter for all requests and throws the response on the CloudGemMessageOfTheDayNotificationBus
    // Inherit from this to define custom behavior.
    class CloudGemMessageOfTheDayResponseHandler
    {
    public:
        AZ_TYPE_INFO(CloudGemMessageOfTheDayResponseHandler, LmbrAWS_CodeGen_ResponseHandler_UUID)
        AZ_CLASS_ALLOCATOR(CloudGemMessageOfTheDayResponseHandler, AZ::SystemAllocator, 0)

        virtual ~CloudGemMessageOfTheDayResponseHandler() {}

        virtual void HandlePutAdminMessagesSuccess(PutAdminMessagesRequestJob* job, AZ::EntityId entityId)
        {

            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnPutAdminMessagesRequestSuccess, job->result);

        }

        virtual void HandlePutAdminMessagesError(PutAdminMessagesRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnPutAdminMessagesRequestError, job->error);
        }

        virtual void HandleDeleteAdminMessagesSuccess(DeleteAdminMessagesRequestJob* job, AZ::EntityId entityId)
        {

            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnDeleteAdminMessagesRequestSuccess, job->result);

        }

        virtual void HandleDeleteAdminMessagesError(DeleteAdminMessagesRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnDeleteAdminMessagesRequestError, job->error);
        }

        virtual void HandlePostAdminMessagesSuccess(PostAdminMessagesRequestJob* job, AZ::EntityId entityId)
        {

            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnPostAdminMessagesRequestSuccess, job->result);

        }

        virtual void HandlePostAdminMessagesError(PostAdminMessagesRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnPostAdminMessagesRequestError, job->error);
        }

        virtual void HandleGetAdminMessagesSuccess(GetAdminMessagesRequestJob* job, AZ::EntityId entityId)
        {

            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnGetAdminMessagesRequestSuccess, job->result);

        }

        virtual void HandleGetAdminMessagesError(GetAdminMessagesRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnGetAdminMessagesRequestError, job->error);
        }

        virtual void HandleGetServiceStatusSuccess(GetServiceStatusRequestJob* job, AZ::EntityId entityId)
        {

            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnGetServiceStatusRequestSuccess, job->result);

        }

        virtual void HandleGetServiceStatusError(GetServiceStatusRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnGetServiceStatusRequestError, job->error);
        }

        virtual void HandleGetPlayerMessagesSuccess(GetPlayerMessagesRequestJob* job, AZ::EntityId entityId)
        {

            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnGetPlayerMessagesRequestSuccess, job->result);

        }

        virtual void HandleGetPlayerMessagesError(GetPlayerMessagesRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemMessageOfTheDayNotificationBus, OnGetPlayerMessagesRequestError, job->error);
        }

    };

    class CloudGemMessageOfTheDayClientComponent
        : public AZ::Component
        , public CloudGemMessageOfTheDayRequestBus::Handler
    {
    public:
        AZ_COMPONENT(CloudGemMessageOfTheDayClientComponent, LmbrAWS_CodeGen_Component_UUID);
        virtual ~CloudGemMessageOfTheDayClientComponent() = default;

        AZStd::shared_ptr<CloudGemMessageOfTheDayResponseHandler> m_defaultResponseHandler;

        void Init() override
        {
            m_defaultResponseHandler = AZStd::make_shared<CloudGemMessageOfTheDayResponseHandler>();
            CloudGemMessageOfTheDay::ServiceAPI::Configure();
        }

        void Activate() override
        {
            CloudGemMessageOfTheDayRequestBus::Handler::BusConnect(m_entity->GetId());
        }

        void Deactivate() override
        {
            CloudGemMessageOfTheDayRequestBus::Handler::BusDisconnect();
        }

        static void Reflect(AZ::ReflectContext* reflection)
        {


            MessageData::Reflect(reflection);



            PutAdminMessagesReturnType::Reflect(reflection);



            DeleteAdminMessagesReturnType::Reflect(reflection);



            DetailedMessageData::Reflect(reflection);





            DetailedMessageList::Reflect(reflection);



            ServiceStatus::Reflect(reflection);





            MessageList::Reflect(reflection);



            AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);
            if (serializeContext)
            {
                // we must include any fields we want to expose to the editor or lua in the serialize context
                serializeContext->Class<CloudGemMessageOfTheDayClientComponent>()
                    ->Version(1);

                AZ::EditContext* editContext = serializeContext->GetEditContext();
                if (editContext)
                {
                    editContext->Class<CloudGemMessageOfTheDayClientComponent>("CloudGemMessageOfTheDayClientComponent", "CloudGemMessageOfTheDay Component")
                        ->ClassElement(AZ::Edit::ClassElements::EditorData, "")
                            ->Attribute(AZ::Edit::Attributes::Category, "Cloud Canvas Gems")
                            ->Attribute(AZ::Edit::Attributes::AppearsInAddComponentMenu, AZ_CRC("Game"));
                }
            }

            AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
            if (behaviorContext)
            {
                behaviorContext->EBus<CloudGemMessageOfTheDayRequestBus>("CloudGemMessageOfTheDayRequestBus")
                    // one of these for each function

                    ->Event("PutAdminMessages", &CloudGemMessageOfTheDayRequestBus::Events::PutAdminMessages)

                    ->Event("DeleteAdminMessages", &CloudGemMessageOfTheDayRequestBus::Events::DeleteAdminMessages)

                    ->Event("PostAdminMessages", &CloudGemMessageOfTheDayRequestBus::Events::PostAdminMessages)

                    ->Event("GetAdminMessages", &CloudGemMessageOfTheDayRequestBus::Events::GetAdminMessages)

                    ->Event("GetServiceStatus", &CloudGemMessageOfTheDayRequestBus::Events::GetServiceStatus)

                    ->Event("GetPlayerMessages", &CloudGemMessageOfTheDayRequestBus::Events::GetPlayerMessages)

                    ;
                behaviorContext->EBus<CloudGemMessageOfTheDayNotificationBus>("CloudGemMessageOfTheDayNotificationBus")
                    ->Handler<BehaviorCloudGemMessageOfTheDayNotificationBusHandler>()
                ;
            }
        }

        // Functions from the swagger definitions


        void PutAdminMessages(const AZStd::string& msg_id, const MessageData& msg, CloudGemMessageOfTheDayResponseHandler* responseHandler) override

        {
            // Cache our entityId in case the entity goes away
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            // Cache our default response handler in case this component goes away
            AZStd::shared_ptr < CloudGemMessageOfTheDayResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            // Create job
            PutAdminMessagesRequestJob* job = PutAdminMessagesRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](PutAdminMessagesRequestJob* job)
                {
                    // handle success
                    CloudGemMessageOfTheDayResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandlePutAdminMessagesSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](PutAdminMessagesRequestJob* job)
                {
                    // handle error
                    CloudGemMessageOfTheDayResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandlePutAdminMessagesError(job, entityId);
                    }
                }
            );

            job->parameters.msg = msg;


            job->parameters.msg_id = msg_id;


            job->Start();
        }


        void DeleteAdminMessages(const AZStd::string& msg_id, CloudGemMessageOfTheDayResponseHandler* responseHandler) override

        {
            // Cache our entityId in case the entity goes away
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            // Cache our default response handler in case this component goes away
            AZStd::shared_ptr < CloudGemMessageOfTheDayResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            // Create job
            DeleteAdminMessagesRequestJob* job = DeleteAdminMessagesRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](DeleteAdminMessagesRequestJob* job)
                {
                    // handle success
                    CloudGemMessageOfTheDayResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleDeleteAdminMessagesSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](DeleteAdminMessagesRequestJob* job)
                {
                    // handle error
                    CloudGemMessageOfTheDayResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleDeleteAdminMessagesError(job, entityId);
                    }
                }
            );


            job->parameters.msg_id = msg_id;


            job->Start();
        }


        void PostAdminMessages(const MessageData& msg, CloudGemMessageOfTheDayResponseHandler* responseHandler) override

        {
            // Cache our entityId in case the entity goes away
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            // Cache our default response handler in case this component goes away
            AZStd::shared_ptr < CloudGemMessageOfTheDayResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            // Create job
            PostAdminMessagesRequestJob* job = PostAdminMessagesRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](PostAdminMessagesRequestJob* job)
                {
                    // handle success
                    CloudGemMessageOfTheDayResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandlePostAdminMessagesSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](PostAdminMessagesRequestJob* job)
                {
                    // handle error
                    CloudGemMessageOfTheDayResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandlePostAdminMessagesError(job, entityId);
                    }
                }
            );

            job->parameters.msg = msg;



            job->Start();
        }


        void GetAdminMessages(const int& index, const int& count, const AZStd::string& filter, CloudGemMessageOfTheDayResponseHandler* responseHandler) override

        {
            // Cache our entityId in case the entity goes away
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            // Cache our default response handler in case this component goes away
            AZStd::shared_ptr < CloudGemMessageOfTheDayResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            // Create job
            GetAdminMessagesRequestJob* job = GetAdminMessagesRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](GetAdminMessagesRequestJob* job)
                {
                    // handle success
                    CloudGemMessageOfTheDayResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleGetAdminMessagesSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](GetAdminMessagesRequestJob* job)
                {
                    // handle error
                    CloudGemMessageOfTheDayResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleGetAdminMessagesError(job, entityId);
                    }
                }
            );



            job->parameters.index = index;

            job->parameters.count = count;

            job->parameters.filter = filter;

            job->Start();
        }


        void GetServiceStatus(CloudGemMessageOfTheDayResponseHandler* responseHandler) override

        {
            // Cache our entityId in case the entity goes away
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            // Cache our default response handler in case this component goes away
            AZStd::shared_ptr < CloudGemMessageOfTheDayResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            // Create job
            GetServiceStatusRequestJob* job = GetServiceStatusRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](GetServiceStatusRequestJob* job)
                {
                    // handle success
                    CloudGemMessageOfTheDayResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleGetServiceStatusSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](GetServiceStatusRequestJob* job)
                {
                    // handle error
                    CloudGemMessageOfTheDayResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleGetServiceStatusError(job, entityId);
                    }
                }
            );



            job->Start();
        }


        void GetPlayerMessages(const AZStd::string& time, const AZStd::string& lang, CloudGemMessageOfTheDayResponseHandler* responseHandler) override

        {
            // Cache our entityId in case the entity goes away
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            // Cache our default response handler in case this component goes away
            AZStd::shared_ptr < CloudGemMessageOfTheDayResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            // Create job
            GetPlayerMessagesRequestJob* job = GetPlayerMessagesRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](GetPlayerMessagesRequestJob* job)
                {
                    // handle success
                    CloudGemMessageOfTheDayResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleGetPlayerMessagesSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](GetPlayerMessagesRequestJob* job)
                {
                    // handle error
                    CloudGemMessageOfTheDayResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleGetPlayerMessagesError(job, entityId);
                    }
                }
            );



            job->parameters.time = time;

            job->parameters.lang = lang;

            job->Start();
        }


    };



    bool MessageData::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {

        if (strcmp(key, "priority") == 0) return reader.Accept(priority);

        if (strcmp(key, "message") == 0) return reader.Accept(message);

        if (strcmp(key, "endTime") == 0) return reader.Accept(endTime);

        if (strcmp(key, "startTime") == 0) return reader.Accept(startTime);

        return reader.Ignore();
    }

    void MessageData::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<MessageData>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<MessageData>("CloudGemMessageOfTheDay_MessageData")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)

                ->Property("priority", BehaviorValueProperty(&MessageData::priority))

                ->Property("message", BehaviorValueProperty(&MessageData::message))

                ->Property("endTime", BehaviorValueProperty(&MessageData::endTime))

                ->Property("startTime", BehaviorValueProperty(&MessageData::startTime))

            ;
        }
    }



    bool PutAdminMessagesReturnType::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {

        return reader.Ignore();
    }

    void PutAdminMessagesReturnType::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<PutAdminMessagesReturnType>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<PutAdminMessagesReturnType>("CloudGemMessageOfTheDay_PutAdminMessagesReturnType")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)

            ;
        }
    }



    bool DeleteAdminMessagesReturnType::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {

        return reader.Ignore();
    }

    void DeleteAdminMessagesReturnType::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<DeleteAdminMessagesReturnType>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<DeleteAdminMessagesReturnType>("CloudGemMessageOfTheDay_DeleteAdminMessagesReturnType")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)

            ;
        }
    }



    bool DetailedMessageData::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {

        if (strcmp(key, "priority") == 0) return reader.Accept(priority);

        if (strcmp(key, "message") == 0) return reader.Accept(message);

        if (strcmp(key, "endTime") == 0) return reader.Accept(endTime);

        if (strcmp(key, "UniqueMsgID") == 0) return reader.Accept(UniqueMsgID);

        if (strcmp(key, "startTime") == 0) return reader.Accept(startTime);

        return reader.Ignore();
    }

    void DetailedMessageData::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<DetailedMessageData>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<DetailedMessageData>("CloudGemMessageOfTheDay_DetailedMessageData")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)

                ->Property("priority", BehaviorValueProperty(&DetailedMessageData::priority))

                ->Property("message", BehaviorValueProperty(&DetailedMessageData::message))

                ->Property("endTime", BehaviorValueProperty(&DetailedMessageData::endTime))

                ->Property("UniqueMsgID", BehaviorValueProperty(&DetailedMessageData::UniqueMsgID))

                ->Property("startTime", BehaviorValueProperty(&DetailedMessageData::startTime))

            ;
        }
    }





    bool DetailedMessageList::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {

        if (strcmp(key, "list") == 0) return reader.Accept(list);

        return reader.Ignore();
    }

    void DetailedMessageList::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<DetailedMessageList>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<DetailedMessageList>("CloudGemMessageOfTheDay_DetailedMessageList")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)

                ->Property("list", BehaviorValueProperty(&DetailedMessageList::list))

            ;
        }
    }



    bool ServiceStatus::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {

        if (strcmp(key, "status") == 0) return reader.Accept(status);

        return reader.Ignore();
    }

    void ServiceStatus::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ServiceStatus>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ServiceStatus>("CloudGemMessageOfTheDay_ServiceStatus")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)

                ->Property("status", BehaviorValueProperty(&ServiceStatus::status))

            ;
        }
    }





    bool MessageList::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {

        if (strcmp(key, "list") == 0) return reader.Accept(list);

        return reader.Ignore();
    }

    void MessageList::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<MessageList>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<MessageList>("CloudGemMessageOfTheDay_MessageList")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)

                ->Property("list", BehaviorValueProperty(&MessageList::list))

            ;
        }
    }


} // ServiceAPI
} // CloudGemMessageOfTheDay