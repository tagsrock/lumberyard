/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// THIS CODE IS AUTOGENERATED, DO NOT MODIFY
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////

#pragma once
#include <AzCore/Component/Component.h>
#include <AzCore/Component/Entity.h>
#include <AzCore/Component/ComponentBus.h>
#include <AzCore/EBus/EBus.h>
#include <AzCore/Memory/SystemAllocator.h>
#include <AzCore/RTTI/BehaviorContext.h>
#include <AzCore/Serialization/EditContext.h>
#include <AzCore/Serialization/SerializeContext.h>
#include <AzCore/std/smart_ptr/make_shared.h>
#include <AzCore/std/smart_ptr/shared_ptr.h>
#include <AzCore/std/string/conversions.h>

#if defined (PLATFORM_SUPPORTS_AWS_NATIVE_SDK)
#include <aws/core/http/HttpRequest.h>
#include <aws/core/http/HttpResponse.h>
#endif // (PLATFORM_SUPPORTS_AWS_NATIVE_SDK)

#include <LmbrAWS/ILmbrAWS.h>

#include <CloudGemFramework/ServiceRequestJob.h>

#include "StdAfx.h"

namespace CloudGemLeaderboard {
namespace ServiceAPI {
    
    const char* LmbrAWS_CodeGen_StatList_UUID= "{77cbb354-d776-11e6-9c4a-e4a7a07157ef}";
    
    const char* LmbrAWS_CodeGen_BannedPlayerList_UUID= "{77cbb353-d776-11e6-a23b-e4a7a07157ef}";
    
    const char* LmbrAWS_CodeGen_Component_UUID= "{77cbb34f-d776-11e6-ab64-e4a7a07157ef}";
    
    const char* LmbrAWS_CodeGen_ResponseHandler_UUID= "{77cbb352-d776-11e6-bb5c-e4a7a07157ef}";
    
    const char* LmbrAWS_CodeGen_NotificationBus1_UUID= "{77cbb350-d776-11e6-ae9a-e4a7a07157ef}";
    
    const char* LmbrAWS_CodeGen_StatDefinition_UUID= "{77cbb358-d776-11e6-b7de-e4a7a07157ef}";
    
    const char* LmbrAWS_CodeGen_BanOutcome_UUID= "{77cbb359-d776-11e6-a4fd-e4a7a07157ef}";
    
    const char* LmbrAWS_CodeGen_SingleScore_UUID= "{77cbb356-d776-11e6-b2ef-e4a7a07157ef}";
    
    const char* LmbrAWS_CodeGen_ServiceStatus_UUID= "{77cbb355-d776-11e6-bfb9-e4a7a07157ef}";
    
    const char* LmbrAWS_CodeGen_RequestBus1_UUID= "{77cbb351-d776-11e6-8df1-e4a7a07157ef}";
    
    const char* LmbrAWS_CodeGen_ScoreData_UUID= "{77cbb357-d776-11e6-b185-e4a7a07157ef}";
    
    const char* LmbrAWS_CodeGen_AdditionalLeaderboardRequestData_UUID= "{77cbb35a-d776-11e6-b310-e4a7a07157ef}";
    

    // redefs
    

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const int& item)
    {
        return writer.Int(item);
    }

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AZStd::string& item)
    {
        return writer.String(item);
    }

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const double& item)
    {
        return writer.Double(item);
    }

    
    
    using StringList = AZStd::vector<AZStd::string>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const StringList& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    struct BannedPlayerList
    {

        AZ_TYPE_INFO(BannedPlayerList, LmbrAWS_CodeGen_BannedPlayerList_UUID)
        AZ_CLASS_ALLOCATOR(BannedPlayerList, AZ::SystemAllocator, 0)

        
        StringList players;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const BannedPlayerList& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("players");
            ok = ok && WriteJson(writer, item.players);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    struct StatDefinition
    {

        AZ_TYPE_INFO(StatDefinition, LmbrAWS_CodeGen_StatDefinition_UUID)
        AZ_CLASS_ALLOCATOR(StatDefinition, AZ::SystemAllocator, 0)

        
        double max;
        
        double min;
        
        AZStd::string name;
        
        double sample_size;
        
        AZStd::string mode;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const StatDefinition& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("max");
            ok = ok && WriteJson(writer, item.max);
            
            ok = ok && writer.Key("min");
            ok = ok && WriteJson(writer, item.min);
            
            ok = ok && writer.Key("name");
            ok = ok && WriteJson(writer, item.name);
            
            ok = ok && writer.Key("sample_size");
            ok = ok && WriteJson(writer, item.sample_size);
            
            ok = ok && writer.Key("mode");
            ok = ok && WriteJson(writer, item.mode);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    using StatDefList = AZStd::vector<StatDefinition>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const StatDefList& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    struct StatList
    {

        AZ_TYPE_INFO(StatList, LmbrAWS_CodeGen_StatList_UUID)
        AZ_CLASS_ALLOCATOR(StatList, AZ::SystemAllocator, 0)

        
        StatDefList stats;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const StatList& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("stats");
            ok = ok && WriteJson(writer, item.stats);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    struct ServiceStatus
    {

        AZ_TYPE_INFO(ServiceStatus, LmbrAWS_CodeGen_ServiceStatus_UUID)
        AZ_CLASS_ALLOCATOR(ServiceStatus, AZ::SystemAllocator, 0)

        
        AZStd::string status;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ServiceStatus& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("status");
            ok = ok && WriteJson(writer, item.status);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    struct SingleScore
    {

        AZ_TYPE_INFO(SingleScore, LmbrAWS_CodeGen_SingleScore_UUID)
        AZ_CLASS_ALLOCATOR(SingleScore, AZ::SystemAllocator, 0)

        
        AZStd::string stat;
        
        AZStd::string user;
        
        double value;
        
        int estimated_rank;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const SingleScore& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("stat");
            ok = ok && WriteJson(writer, item.stat);
            
            ok = ok && writer.Key("user");
            ok = ok && WriteJson(writer, item.user);
            
            ok = ok && writer.Key("value");
            ok = ok && WriteJson(writer, item.value);
            
            ok = ok && writer.Key("estimated_rank");
            ok = ok && WriteJson(writer, item.estimated_rank);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    using ScoreList = AZStd::vector<SingleScore>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ScoreList& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    struct ScoreData
    {

        AZ_TYPE_INFO(ScoreData, LmbrAWS_CodeGen_ScoreData_UUID)
        AZ_CLASS_ALLOCATOR(ScoreData, AZ::SystemAllocator, 0)

        
        ScoreList scores;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ScoreData& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("scores");
            ok = ok && WriteJson(writer, item.scores);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    struct BanOutcome
    {

        AZ_TYPE_INFO(BanOutcome, LmbrAWS_CodeGen_BanOutcome_UUID)
        AZ_CLASS_ALLOCATOR(BanOutcome, AZ::SystemAllocator, 0)

        
        AZStd::string status;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const BanOutcome& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("status");
            ok = ok && WriteJson(writer, item.status);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    struct AdditionalLeaderboardRequestData
    {

        AZ_TYPE_INFO(AdditionalLeaderboardRequestData, LmbrAWS_CodeGen_AdditionalLeaderboardRequestData_UUID)
        AZ_CLASS_ALLOCATOR(AdditionalLeaderboardRequestData, AZ::SystemAllocator, 0)

        
        StringList users;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AdditionalLeaderboardRequestData& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("users");
            ok = ok && WriteJson(writer, item.users);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    


    // Service RequestJobs
    CLOUD_GEM_SERVICE(CloudGemLeaderboard);

    void Configure()
    {
        // Insert any necessary CloudGemFramework configuration here
    }
    
    class GetPlayerBan_listRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_GET, "/player/ban_list");

        struct Parameters
        {
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        BannedPlayerList result;
        

        Parameters parameters;
    };


    using GetPlayerBan_listRequestJob = CloudGemFramework::ServiceRequestJob<GetPlayerBan_listRequest>;
    
    class DeleteStatsRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_DELETE, "/stats/{stat_name}");

        struct Parameters
        {
            
            AZStd::string stat_name;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""stat_name""}", stat_name);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        StatList result;
        

        Parameters parameters;
    };


    using DeleteStatsRequestJob = CloudGemFramework::ServiceRequestJob<DeleteStatsRequest>;
    
    class GetServiceStatusRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_GET, "/service/status");

        struct Parameters
        {
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        ServiceStatus result;
        

        Parameters parameters;
    };


    using GetServiceStatusRequestJob = CloudGemFramework::ServiceRequestJob<GetServiceStatusRequest>;
    
    class GetScoresRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_GET, "/scores/{user}");

        struct Parameters
        {
            
            AZStd::string user;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""user""}", user);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        ScoreData result;
        

        Parameters parameters;
    };


    using GetScoresRequestJob = CloudGemFramework::ServiceRequestJob<GetScoresRequest>;
    
    class PostStatsRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_POST, "/stats");

        struct Parameters
        {
            
            StatDefinition stat_def;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                ok = ok && CloudGemLeaderboard::ServiceAPI::WriteJson(writer, stat_def);
                
                return ok;
            }
        };

        
        StatList result;
        

        Parameters parameters;
    };


    using PostStatsRequestJob = CloudGemFramework::ServiceRequestJob<PostStatsRequest>;
    
    class GetStatsRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_GET, "/stats");

        struct Parameters
        {
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        StatList result;
        

        Parameters parameters;
    };


    using GetStatsRequestJob = CloudGemFramework::ServiceRequestJob<GetStatsRequest>;
    
    class PostPlayerBanRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_POST, "/player/ban/{user}");

        struct Parameters
        {
            
            AZStd::string user;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""user""}", user);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        BanOutcome result;
        

        Parameters parameters;
    };


    using PostPlayerBanRequestJob = CloudGemFramework::ServiceRequestJob<PostPlayerBanRequest>;
    
    class DeletePlayerBanRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_DELETE, "/player/ban/{user}");

        struct Parameters
        {
            
            AZStd::string user;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""user""}", user);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        BanOutcome result;
        

        Parameters parameters;
    };


    using DeletePlayerBanRequestJob = CloudGemFramework::ServiceRequestJob<DeletePlayerBanRequest>;
    
    class PostScoreRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_POST, "/score");

        struct Parameters
        {
            
            SingleScore score_entry;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                ok = ok && CloudGemLeaderboard::ServiceAPI::WriteJson(writer, score_entry);
                
                return ok;
            }
        };

        
        SingleScore result;
        

        Parameters parameters;
    };


    using PostScoreRequestJob = CloudGemFramework::ServiceRequestJob<PostScoreRequest>;
    
    class DeleteScoreRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_DELETE, "/score/{stat}/{user}");

        struct Parameters
        {
            
            AZStd::string user;
            
            AZStd::string stat;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""user""}", user);
                
                ok = ok && request.SetPathParameter("{""stat""}", stat);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        ScoreData result;
        

        Parameters parameters;
    };


    using DeleteScoreRequestJob = CloudGemFramework::ServiceRequestJob<DeleteScoreRequest>;
    
    class GetScoreRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_GET, "/score/{stat}/{user}");

        struct Parameters
        {
            
            AZStd::string user;
            
            AZStd::string stat;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""user""}", user);
                
                ok = ok && request.SetPathParameter("{""stat""}", stat);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        ScoreData result;
        

        Parameters parameters;
    };


    using GetScoreRequestJob = CloudGemFramework::ServiceRequestJob<GetScoreRequest>;
    
    class PostLeaderboardRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemLeaderboard, HttpMethod::HTTP_POST, "/leaderboard/{stat}");

        struct Parameters
        {
            
            AZStd::string stat;
            
            AdditionalLeaderboardRequestData additional_data;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""stat""}", stat);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                ok = ok && CloudGemLeaderboard::ServiceAPI::WriteJson(writer, additional_data);
                
                return ok;
            }
        };

        
        ScoreData result;
        

        Parameters parameters;
    };


    using PostLeaderboardRequestJob = CloudGemFramework::ServiceRequestJob<PostLeaderboardRequest>;
    


    // Notification bus for this component
    class CloudGemLeaderboardNotifications
        : public AZ::ComponentBus
    {
    public:
        // static const bool EnableEventQueue = true;
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetPlayerBan_listRequestSuccess(const BannedPlayerList response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetPlayerBan_listRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnDeleteStatsRequestSuccess(const StatList response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnDeleteStatsRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetServiceStatusRequestSuccess(const ServiceStatus response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetServiceStatusRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetScoresRequestSuccess(const ScoreData response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetScoresRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnPostStatsRequestSuccess(const StatList response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnPostStatsRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetStatsRequestSuccess(const StatList response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetStatsRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnPostPlayerBanRequestSuccess(const BanOutcome response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnPostPlayerBanRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnDeletePlayerBanRequestSuccess(const BanOutcome response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnDeletePlayerBanRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnPostScoreRequestSuccess(const SingleScore response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnPostScoreRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnDeleteScoreRequestSuccess(const ScoreData response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnDeleteScoreRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetScoreRequestSuccess(const ScoreData response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetScoreRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnPostLeaderboardRequestSuccess(const ScoreData response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnPostLeaderboardRequestError(const CloudGemFramework::Error error) { }
        
    };

    using CloudGemLeaderboardNotificationBus = AZ::EBus<CloudGemLeaderboardNotifications>;

    class BehaviorCloudGemLeaderboardNotificationBusHandler
        : public CloudGemLeaderboardNotificationBus::Handler, public AZ::BehaviorEBusHandler
    {
    public:
        AZ_EBUS_BEHAVIOR_BINDER(BehaviorCloudGemLeaderboardNotificationBusHandler, LmbrAWS_CodeGen_NotificationBus1_UUID, AZ::SystemAllocator
        
        , OnGetPlayerBan_listRequestSuccess
        , OnGetPlayerBan_listRequestError
        
        , OnDeleteStatsRequestSuccess
        , OnDeleteStatsRequestError
        
        , OnGetServiceStatusRequestSuccess
        , OnGetServiceStatusRequestError
        
        , OnGetScoresRequestSuccess
        , OnGetScoresRequestError
        
        , OnPostStatsRequestSuccess
        , OnPostStatsRequestError
        
        , OnGetStatsRequestSuccess
        , OnGetStatsRequestError
        
        , OnPostPlayerBanRequestSuccess
        , OnPostPlayerBanRequestError
        
        , OnDeletePlayerBanRequestSuccess
        , OnDeletePlayerBanRequestError
        
        , OnPostScoreRequestSuccess
        , OnPostScoreRequestError
        
        , OnDeleteScoreRequestSuccess
        , OnDeleteScoreRequestError
        
        , OnGetScoreRequestSuccess
        , OnGetScoreRequestError
        
        , OnPostLeaderboardRequestSuccess
        , OnPostLeaderboardRequestError
        
        );
        
        
        void OnGetPlayerBan_listRequestSuccess(const BannedPlayerList response) override
        {
            Call(FN_OnGetPlayerBan_listRequestSuccess, response);
        }
        
        void OnGetPlayerBan_listRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnGetPlayerBan_listRequestError, error);
        }
        
        
        void OnDeleteStatsRequestSuccess(const StatList response) override
        {
            Call(FN_OnDeleteStatsRequestSuccess, response);
        }
        
        void OnDeleteStatsRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnDeleteStatsRequestError, error);
        }
        
        
        void OnGetServiceStatusRequestSuccess(const ServiceStatus response) override
        {
            Call(FN_OnGetServiceStatusRequestSuccess, response);
        }
        
        void OnGetServiceStatusRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnGetServiceStatusRequestError, error);
        }
        
        
        void OnGetScoresRequestSuccess(const ScoreData response) override
        {
            Call(FN_OnGetScoresRequestSuccess, response);
        }
        
        void OnGetScoresRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnGetScoresRequestError, error);
        }
        
        
        void OnPostStatsRequestSuccess(const StatList response) override
        {
            Call(FN_OnPostStatsRequestSuccess, response);
        }
        
        void OnPostStatsRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnPostStatsRequestError, error);
        }
        
        
        void OnGetStatsRequestSuccess(const StatList response) override
        {
            Call(FN_OnGetStatsRequestSuccess, response);
        }
        
        void OnGetStatsRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnGetStatsRequestError, error);
        }
        
        
        void OnPostPlayerBanRequestSuccess(const BanOutcome response) override
        {
            Call(FN_OnPostPlayerBanRequestSuccess, response);
        }
        
        void OnPostPlayerBanRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnPostPlayerBanRequestError, error);
        }
        
        
        void OnDeletePlayerBanRequestSuccess(const BanOutcome response) override
        {
            Call(FN_OnDeletePlayerBanRequestSuccess, response);
        }
        
        void OnDeletePlayerBanRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnDeletePlayerBanRequestError, error);
        }
        
        
        void OnPostScoreRequestSuccess(const SingleScore response) override
        {
            Call(FN_OnPostScoreRequestSuccess, response);
        }
        
        void OnPostScoreRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnPostScoreRequestError, error);
        }
        
        
        void OnDeleteScoreRequestSuccess(const ScoreData response) override
        {
            Call(FN_OnDeleteScoreRequestSuccess, response);
        }
        
        void OnDeleteScoreRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnDeleteScoreRequestError, error);
        }
        
        
        void OnGetScoreRequestSuccess(const ScoreData response) override
        {
            Call(FN_OnGetScoreRequestSuccess, response);
        }
        
        void OnGetScoreRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnGetScoreRequestError, error);
        }
        
        
        void OnPostLeaderboardRequestSuccess(const ScoreData response) override
        {
            Call(FN_OnPostLeaderboardRequestSuccess, response);
        }
        
        void OnPostLeaderboardRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnPostLeaderboardRequestError, error);
        }
        
    };
    class CloudGemLeaderboardResponseHandler;

    // Request bus for this component
    class CloudGemLeaderboardRequests
        : public AZ::ComponentBus
    {
    public:
        virtual ~CloudGemLeaderboardRequests() {}
        
        
        virtual void GetPlayerBan_list(CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
        
        virtual void DeleteStats(const AZStd::string& stat_name, CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
        
        virtual void GetServiceStatus(CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
        
        virtual void GetScores(const AZStd::string& user, CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
        
        virtual void PostStats(const StatDefinition& stat_def, CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
        
        virtual void GetStats(CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
        
        virtual void PostPlayerBan(const AZStd::string& user, CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
        
        virtual void DeletePlayerBan(const AZStd::string& user, CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
        
        virtual void PostScore(const SingleScore& score_entry, CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
        
        virtual void DeleteScore(const AZStd::string& user, const AZStd::string& stat, CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
        
        virtual void GetScore(const AZStd::string& user, const AZStd::string& stat, CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
        
        virtual void PostLeaderboard(const AZStd::string& stat, const AdditionalLeaderboardRequestData& additional_data, CloudGemLeaderboardResponseHandler* responseHandler) { }
        
        
    };

    using CloudGemLeaderboardRequestBus = AZ::EBus<CloudGemLeaderboardRequests>;

    // This class is used as a parameter for all requests and throws the response on the CloudGemLeaderboardNotificationBus
    // Inherit from this to define custom behavior.
    class CloudGemLeaderboardResponseHandler
    {
    public:
        AZ_TYPE_INFO(CloudGemLeaderboardResponseHandler, LmbrAWS_CodeGen_ResponseHandler_UUID)
        AZ_CLASS_ALLOCATOR(CloudGemLeaderboardResponseHandler, AZ::SystemAllocator, 0)

        virtual ~CloudGemLeaderboardResponseHandler() {}
        
        virtual void HandleGetPlayerBan_listSuccess(GetPlayerBan_listRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnGetPlayerBan_listRequestSuccess, job->result);
            
        }

        virtual void HandleGetPlayerBan_listError(GetPlayerBan_listRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnGetPlayerBan_listRequestError, job->error);
        }
        
        virtual void HandleDeleteStatsSuccess(DeleteStatsRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnDeleteStatsRequestSuccess, job->result);
            
        }

        virtual void HandleDeleteStatsError(DeleteStatsRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnDeleteStatsRequestError, job->error);
        }
        
        virtual void HandleGetServiceStatusSuccess(GetServiceStatusRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnGetServiceStatusRequestSuccess, job->result);
            
        }

        virtual void HandleGetServiceStatusError(GetServiceStatusRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnGetServiceStatusRequestError, job->error);
        }
        
        virtual void HandleGetScoresSuccess(GetScoresRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnGetScoresRequestSuccess, job->result);
            
        }

        virtual void HandleGetScoresError(GetScoresRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnGetScoresRequestError, job->error);
        }
        
        virtual void HandlePostStatsSuccess(PostStatsRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnPostStatsRequestSuccess, job->result);
            
        }

        virtual void HandlePostStatsError(PostStatsRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnPostStatsRequestError, job->error);
        }
        
        virtual void HandleGetStatsSuccess(GetStatsRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnGetStatsRequestSuccess, job->result);
            
        }

        virtual void HandleGetStatsError(GetStatsRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnGetStatsRequestError, job->error);
        }
        
        virtual void HandlePostPlayerBanSuccess(PostPlayerBanRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnPostPlayerBanRequestSuccess, job->result);
            
        }

        virtual void HandlePostPlayerBanError(PostPlayerBanRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnPostPlayerBanRequestError, job->error);
        }
        
        virtual void HandleDeletePlayerBanSuccess(DeletePlayerBanRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnDeletePlayerBanRequestSuccess, job->result);
            
        }

        virtual void HandleDeletePlayerBanError(DeletePlayerBanRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnDeletePlayerBanRequestError, job->error);
        }
        
        virtual void HandlePostScoreSuccess(PostScoreRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnPostScoreRequestSuccess, job->result);
            
        }

        virtual void HandlePostScoreError(PostScoreRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnPostScoreRequestError, job->error);
        }
        
        virtual void HandleDeleteScoreSuccess(DeleteScoreRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnDeleteScoreRequestSuccess, job->result);
            
        }

        virtual void HandleDeleteScoreError(DeleteScoreRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnDeleteScoreRequestError, job->error);
        }
        
        virtual void HandleGetScoreSuccess(GetScoreRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnGetScoreRequestSuccess, job->result);
            
        }

        virtual void HandleGetScoreError(GetScoreRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnGetScoreRequestError, job->error);
        }
        
        virtual void HandlePostLeaderboardSuccess(PostLeaderboardRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnPostLeaderboardRequestSuccess, job->result);
            
        }

        virtual void HandlePostLeaderboardError(PostLeaderboardRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemLeaderboardNotificationBus, OnPostLeaderboardRequestError, job->error);
        }
        
    };

    class CloudGemLeaderboardClientComponent
        : public AZ::Component
        , public CloudGemLeaderboardRequestBus::Handler
    {
    public:
        AZ_COMPONENT(CloudGemLeaderboardClientComponent, LmbrAWS_CodeGen_Component_UUID);
        virtual ~CloudGemLeaderboardClientComponent() = default;

        AZStd::shared_ptr<CloudGemLeaderboardResponseHandler> m_defaultResponseHandler;

        void Init() override
        {
            m_defaultResponseHandler = AZStd::make_shared<CloudGemLeaderboardResponseHandler>();
            CloudGemLeaderboard::ServiceAPI::Configure();
        }

        void Activate() override
        {
            CloudGemLeaderboardRequestBus::Handler::BusConnect(m_entity->GetId());
        }

        void Deactivate() override
        {
            CloudGemLeaderboardRequestBus::Handler::BusDisconnect();
        }

        static void Reflect(AZ::ReflectContext* reflection)
        {
            
            
            
            
            BannedPlayerList::Reflect(reflection);
            
            
            
            StatDefinition::Reflect(reflection);
            
            
            
            
            
            StatList::Reflect(reflection);
            
            
            
            ServiceStatus::Reflect(reflection);
            
            
            
            SingleScore::Reflect(reflection);
            
            
            
            
            
            ScoreData::Reflect(reflection);
            
            
            
            BanOutcome::Reflect(reflection);
            
            
            
            AdditionalLeaderboardRequestData::Reflect(reflection);
            
            

            AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);
            if (serializeContext)
            {
                // we must include any fields we want to expose to the editor or lua in the serialize context
                serializeContext->Class<CloudGemLeaderboardClientComponent>()
                    ->Version(1);

                AZ::EditContext* editContext = serializeContext->GetEditContext();
                if (editContext)
                {
                    editContext->Class<CloudGemLeaderboardClientComponent>("CloudGemLeaderboardClientComponent", "CloudGemLeaderboard Component")
                        ->ClassElement(AZ::Edit::ClassElements::EditorData, "")
                            ->Attribute(AZ::Edit::Attributes::Category, "Cloud Canvas Gems")
                            ->Attribute(AZ::Edit::Attributes::AppearsInAddComponentMenu, AZ_CRC("Game"));
                }
            }

            AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
            if (behaviorContext)
            {
                behaviorContext->EBus<CloudGemLeaderboardRequestBus>("CloudGemLeaderboardRequestBus")
                    // one of these for each function
                    
                    ->Event("GetPlayerBan_list", &CloudGemLeaderboardRequestBus::Events::GetPlayerBan_list)
                    
                    ->Event("DeleteStats", &CloudGemLeaderboardRequestBus::Events::DeleteStats)
                    
                    ->Event("GetServiceStatus", &CloudGemLeaderboardRequestBus::Events::GetServiceStatus)
                    
                    ->Event("GetScores", &CloudGemLeaderboardRequestBus::Events::GetScores)
                    
                    ->Event("PostStats", &CloudGemLeaderboardRequestBus::Events::PostStats)
                    
                    ->Event("GetStats", &CloudGemLeaderboardRequestBus::Events::GetStats)
                    
                    ->Event("PostPlayerBan", &CloudGemLeaderboardRequestBus::Events::PostPlayerBan)
                    
                    ->Event("DeletePlayerBan", &CloudGemLeaderboardRequestBus::Events::DeletePlayerBan)
                    
                    ->Event("PostScore", &CloudGemLeaderboardRequestBus::Events::PostScore)
                    
                    ->Event("DeleteScore", &CloudGemLeaderboardRequestBus::Events::DeleteScore)
                    
                    ->Event("GetScore", &CloudGemLeaderboardRequestBus::Events::GetScore)
                    
                    ->Event("PostLeaderboard", &CloudGemLeaderboardRequestBus::Events::PostLeaderboard)
                    
                    ;
                behaviorContext->EBus<CloudGemLeaderboardNotificationBus>("CloudGemLeaderboardNotificationBus")
                    ->Handler<BehaviorCloudGemLeaderboardNotificationBusHandler>()
                ;
            }
        }

        // Functions from the swagger definitions
        
        
        void GetPlayerBan_list(CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            GetPlayerBan_listRequestJob* job = GetPlayerBan_listRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](GetPlayerBan_listRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleGetPlayerBan_listSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](GetPlayerBan_listRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleGetPlayerBan_listError(job, entityId);
                    }
                }
            );
            
            
            
            job->Start();
        }
        
        
        void DeleteStats(const AZStd::string& stat_name, CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            DeleteStatsRequestJob* job = DeleteStatsRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](DeleteStatsRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleDeleteStatsSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](DeleteStatsRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleDeleteStatsError(job, entityId);
                    }
                }
            );
            
            
            job->parameters.stat_name = stat_name;
            
            
            job->Start();
        }
        
        
        void GetServiceStatus(CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            GetServiceStatusRequestJob* job = GetServiceStatusRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](GetServiceStatusRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleGetServiceStatusSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](GetServiceStatusRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleGetServiceStatusError(job, entityId);
                    }
                }
            );
            
            
            
            job->Start();
        }
        
        
        void GetScores(const AZStd::string& user, CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            GetScoresRequestJob* job = GetScoresRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](GetScoresRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleGetScoresSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](GetScoresRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleGetScoresError(job, entityId);
                    }
                }
            );
            
            
            job->parameters.user = user;
            
            
            job->Start();
        }
        
        
        void PostStats(const StatDefinition& stat_def, CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            PostStatsRequestJob* job = PostStatsRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](PostStatsRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandlePostStatsSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](PostStatsRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandlePostStatsError(job, entityId);
                    }
                }
            );
            
            job->parameters.stat_def = stat_def;
            
            
            
            job->Start();
        }
        
        
        void GetStats(CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            GetStatsRequestJob* job = GetStatsRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](GetStatsRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleGetStatsSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](GetStatsRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleGetStatsError(job, entityId);
                    }
                }
            );
            
            
            
            job->Start();
        }
        
        
        void PostPlayerBan(const AZStd::string& user, CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            PostPlayerBanRequestJob* job = PostPlayerBanRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](PostPlayerBanRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandlePostPlayerBanSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](PostPlayerBanRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandlePostPlayerBanError(job, entityId);
                    }
                }
            );
            
            
            job->parameters.user = user;
            
            
            job->Start();
        }
        
        
        void DeletePlayerBan(const AZStd::string& user, CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            DeletePlayerBanRequestJob* job = DeletePlayerBanRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](DeletePlayerBanRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleDeletePlayerBanSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](DeletePlayerBanRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleDeletePlayerBanError(job, entityId);
                    }
                }
            );
            
            
            job->parameters.user = user;
            
            
            job->Start();
        }
        
        
        void PostScore(const SingleScore& score_entry, CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            PostScoreRequestJob* job = PostScoreRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](PostScoreRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandlePostScoreSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](PostScoreRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandlePostScoreError(job, entityId);
                    }
                }
            );
            
            job->parameters.score_entry = score_entry;
            
            
            
            job->Start();
        }
        
        
        void DeleteScore(const AZStd::string& user, const AZStd::string& stat, CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            DeleteScoreRequestJob* job = DeleteScoreRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](DeleteScoreRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleDeleteScoreSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](DeleteScoreRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleDeleteScoreError(job, entityId);
                    }
                }
            );
            
            
            job->parameters.user = user;
            
            job->parameters.stat = stat;
            
            
            job->Start();
        }
        
        
        void GetScore(const AZStd::string& user, const AZStd::string& stat, CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            GetScoreRequestJob* job = GetScoreRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](GetScoreRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleGetScoreSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](GetScoreRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleGetScoreError(job, entityId);
                    }
                }
            );
            
            
            job->parameters.user = user;
            
            job->parameters.stat = stat;
            
            
            job->Start();
        }
        
        
        void PostLeaderboard(const AZStd::string& stat, const AdditionalLeaderboardRequestData& additional_data, CloudGemLeaderboardResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemLeaderboardResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            PostLeaderboardRequestJob* job = PostLeaderboardRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](PostLeaderboardRequestJob* job)
                {
                    // handle success
                    CloudGemLeaderboardResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandlePostLeaderboardSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](PostLeaderboardRequestJob* job)
                {
                    // handle error
                    CloudGemLeaderboardResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandlePostLeaderboardError(job, entityId);
                    }
                }
            );
            
            job->parameters.additional_data = additional_data;
            
            
            job->parameters.stat = stat;
            
            
            job->Start();
        }
        

    };

    
    
    
    
    bool BannedPlayerList::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "players") == 0) return reader.Accept(players);
        
        return reader.Ignore();
    }

    void BannedPlayerList::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<BannedPlayerList>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<BannedPlayerList>("CloudGemLeaderboard_BannedPlayerList")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("players", BehaviorValueProperty(&BannedPlayerList::players))
            
            ;
        }
    }
    
    
    
    bool StatDefinition::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "max") == 0) return reader.Accept(max);
        
        if (strcmp(key, "min") == 0) return reader.Accept(min);
        
        if (strcmp(key, "name") == 0) return reader.Accept(name);
        
        if (strcmp(key, "sample_size") == 0) return reader.Accept(sample_size);
        
        if (strcmp(key, "mode") == 0) return reader.Accept(mode);
        
        return reader.Ignore();
    }

    void StatDefinition::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<StatDefinition>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<StatDefinition>("CloudGemLeaderboard_StatDefinition")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("max", BehaviorValueProperty(&StatDefinition::max))
            
                ->Property("min", BehaviorValueProperty(&StatDefinition::min))
            
                ->Property("name", BehaviorValueProperty(&StatDefinition::name))
            
                ->Property("sample_size", BehaviorValueProperty(&StatDefinition::sample_size))
            
                ->Property("mode", BehaviorValueProperty(&StatDefinition::mode))
            
            ;
        }
    }
    
    
    
    
    
    bool StatList::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "stats") == 0) return reader.Accept(stats);
        
        return reader.Ignore();
    }

    void StatList::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<StatList>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<StatList>("CloudGemLeaderboard_StatList")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("stats", BehaviorValueProperty(&StatList::stats))
            
            ;
        }
    }
    
    
    
    bool ServiceStatus::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "status") == 0) return reader.Accept(status);
        
        return reader.Ignore();
    }

    void ServiceStatus::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ServiceStatus>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ServiceStatus>("CloudGemLeaderboard_ServiceStatus")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("status", BehaviorValueProperty(&ServiceStatus::status))
            
            ;
        }
    }
    
    
    
    bool SingleScore::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "stat") == 0) return reader.Accept(stat);
        
        if (strcmp(key, "user") == 0) return reader.Accept(user);
        
        if (strcmp(key, "value") == 0) return reader.Accept(value);
        
        if (strcmp(key, "estimated_rank") == 0) return reader.Accept(estimated_rank);
        
        return reader.Ignore();
    }

    void SingleScore::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<SingleScore>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<SingleScore>("CloudGemLeaderboard_SingleScore")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("stat", BehaviorValueProperty(&SingleScore::stat))
            
                ->Property("user", BehaviorValueProperty(&SingleScore::user))
            
                ->Property("value", BehaviorValueProperty(&SingleScore::value))
            
                ->Property("estimated_rank", BehaviorValueProperty(&SingleScore::estimated_rank))
            
            ;
        }
    }
    
    
    
    
    
    bool ScoreData::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "scores") == 0) return reader.Accept(scores);
        
        return reader.Ignore();
    }

    void ScoreData::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ScoreData>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ScoreData>("CloudGemLeaderboard_ScoreData")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("scores", BehaviorValueProperty(&ScoreData::scores))
            
            ;
        }
    }
    
    
    
    bool BanOutcome::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "status") == 0) return reader.Accept(status);
        
        return reader.Ignore();
    }

    void BanOutcome::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<BanOutcome>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<BanOutcome>("CloudGemLeaderboard_BanOutcome")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("status", BehaviorValueProperty(&BanOutcome::status))
            
            ;
        }
    }
    
    
    
    bool AdditionalLeaderboardRequestData::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "users") == 0) return reader.Accept(users);
        
        return reader.Ignore();
    }

    void AdditionalLeaderboardRequestData::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<AdditionalLeaderboardRequestData>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<AdditionalLeaderboardRequestData>("CloudGemLeaderboard_AdditionalLeaderboardRequestData")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("users", BehaviorValueProperty(&AdditionalLeaderboardRequestData::users))
            
            ;
        }
    }
    
    
} // ServiceAPI
} // CloudGemLeaderboard