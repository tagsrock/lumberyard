/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/

/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////
// THIS CODE IS AUTOGENERATED, DO NOT MODIFY
/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////

#pragma once
#include <AzCore/Component/Component.h>
#include <AzCore/Component/Entity.h>
#include <AzCore/Component/ComponentBus.h>
#include <AzCore/EBus/EBus.h>
#include <AzCore/Memory/SystemAllocator.h>
#include <AzCore/RTTI/BehaviorContext.h>
#include <AzCore/Serialization/EditContext.h>
#include <AzCore/Serialization/SerializeContext.h>
#include <AzCore/std/smart_ptr/make_shared.h>
#include <AzCore/std/smart_ptr/shared_ptr.h>
#include <AzCore/std/string/conversions.h>

#if defined (PLATFORM_SUPPORTS_AWS_NATIVE_SDK)
#include <aws/core/http/HttpRequest.h>
#include <aws/core/http/HttpResponse.h>
#endif // (PLATFORM_SUPPORTS_AWS_NATIVE_SDK)

#include <LmbrAWS/ILmbrAWS.h>

#include <CloudGemFramework/ServiceRequestJob.h>

#include "StdAfx.h"

namespace CloudGemDynamicContent {
namespace ServiceAPI {
    
    const char* LmbrAWS_CodeGen_Component_UUID= "{30f2b6b0-e3fe-11e6-ac87-40e230988dca}";
    
    const char* LmbrAWS_CodeGen_PortalFileRequest_UUID= "{30f2b6b7-e3fe-11e6-b503-40e230988dca}";
    
    const char* LmbrAWS_CodeGen_PortalFileListResults_UUID= "{30f2b6ba-e3fe-11e6-ba66-40e230988dca}";
    
    const char* LmbrAWS_CodeGen_ResponseHandler_UUID= "{30f2b6b3-e3fe-11e6-bcf7-40e230988dca}";
    
    const char* LmbrAWS_CodeGen_NotificationBus1_UUID= "{30f2b6b1-e3fe-11e6-b714-40e230988dca}";
    
    const char* LmbrAWS_CodeGen_RequestBus1_UUID= "{30f2b6b2-e3fe-11e6-aee5-40e230988dca}";
    
    const char* LmbrAWS_CodeGen_RequestData_UUID= "{30f2b6b4-e3fe-11e6-930f-40e230988dca}";
    
    const char* LmbrAWS_CodeGen_FileRequestResults_UUID= "{30f2b6b6-e3fe-11e6-a77d-40e230988dca}";
    
    const char* LmbrAWS_CodeGen_FileRequestResult_UUID= "{30f2b6b5-e3fe-11e6-b1a8-40e230988dca}";
    
    const char* LmbrAWS_CodeGen_ServiceStatus_UUID= "{30f2b6bb-e3fe-11e6-995f-40e230988dca}";
    
    const char* LmbrAWS_CodeGen_PortalFileRequestList_UUID= "{30f2b6b8-e3fe-11e6-b773-40e230988dca}";
    
    const char* LmbrAWS_CodeGen_PortalFileInfo_UUID= "{30f2b6b9-e3fe-11e6-99a5-40e230988dca}";
    

    // redefs
    

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const int& item)
    {
        return writer.Int(item);
    }

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const AZStd::string& item)
    {
        return writer.String(item);
    }

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const double& item)
    {
        return writer.Double(item);
    }

    
    
    using RequestDataPropertyFileList = AZStd::vector<AZStd::string>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const RequestDataPropertyFileList& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    struct RequestData
    {

        AZ_TYPE_INFO(RequestData, LmbrAWS_CodeGen_RequestData_UUID)
        AZ_CLASS_ALLOCATOR(RequestData, AZ::SystemAllocator, 0)

        
        RequestDataPropertyFileList FileList;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const RequestData& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("FileList");
            ok = ok && WriteJson(writer, item.FileList);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    struct FileRequestResult
    {

        AZ_TYPE_INFO(FileRequestResult, LmbrAWS_CodeGen_FileRequestResult_UUID)
        AZ_CLASS_ALLOCATOR(FileRequestResult, AZ::SystemAllocator, 0)

        
        AZStd::string FileStatus;
        
        AZStd::string Signature;
        
        AZStd::string PresignedURL;
        
        AZStd::string FileName;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const FileRequestResult& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("FileStatus");
            ok = ok && WriteJson(writer, item.FileStatus);
            
            ok = ok && writer.Key("Signature");
            ok = ok && WriteJson(writer, item.Signature);
            
            ok = ok && writer.Key("PresignedURL");
            ok = ok && WriteJson(writer, item.PresignedURL);
            
            ok = ok && writer.Key("FileName");
            ok = ok && WriteJson(writer, item.FileName);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    using FileRequestResultArray = AZStd::vector<FileRequestResult>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const FileRequestResultArray& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    struct FileRequestResults
    {

        AZ_TYPE_INFO(FileRequestResults, LmbrAWS_CodeGen_FileRequestResults_UUID)
        AZ_CLASS_ALLOCATOR(FileRequestResults, AZ::SystemAllocator, 0)

        
        FileRequestResultArray ResultList;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const FileRequestResults& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("ResultList");
            ok = ok && WriteJson(writer, item.ResultList);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    struct PortalFileRequest
    {

        AZ_TYPE_INFO(PortalFileRequest, LmbrAWS_CodeGen_PortalFileRequest_UUID)
        AZ_CLASS_ALLOCATOR(PortalFileRequest, AZ::SystemAllocator, 0)

        
        AZStd::string StagingEnd;
        
        AZStd::string StagingStatus;
        
        AZStd::string StagingStart;
        
        AZStd::string FileName;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const PortalFileRequest& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("StagingEnd");
            ok = ok && WriteJson(writer, item.StagingEnd);
            
            ok = ok && writer.Key("StagingStatus");
            ok = ok && WriteJson(writer, item.StagingStatus);
            
            ok = ok && writer.Key("StagingStart");
            ok = ok && WriteJson(writer, item.StagingStart);
            
            ok = ok && writer.Key("FileName");
            ok = ok && WriteJson(writer, item.FileName);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    using PortalFileRequestListPropertyFileList = AZStd::vector<PortalFileRequest>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const PortalFileRequestListPropertyFileList& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    struct PortalFileRequestList
    {

        AZ_TYPE_INFO(PortalFileRequestList, LmbrAWS_CodeGen_PortalFileRequestList_UUID)
        AZ_CLASS_ALLOCATOR(PortalFileRequestList, AZ::SystemAllocator, 0)

        
        PortalFileRequestListPropertyFileList FileList;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const PortalFileRequestList& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("FileList");
            ok = ok && WriteJson(writer, item.FileList);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    struct PortalFileInfo
    {

        AZ_TYPE_INFO(PortalFileInfo, LmbrAWS_CodeGen_PortalFileInfo_UUID)
        AZ_CLASS_ALLOCATOR(PortalFileInfo, AZ::SystemAllocator, 0)

        
        AZStd::string StagingEnd;
        
        AZStd::string StagingStatus;
        
        AZStd::string StagingStart;
        
        AZStd::string Parent;
        
        AZStd::string FileName;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const PortalFileInfo& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("StagingEnd");
            ok = ok && WriteJson(writer, item.StagingEnd);
            
            ok = ok && writer.Key("StagingStatus");
            ok = ok && WriteJson(writer, item.StagingStatus);
            
            ok = ok && writer.Key("StagingStart");
            ok = ok && WriteJson(writer, item.StagingStart);
            
            ok = ok && writer.Key("Parent");
            ok = ok && WriteJson(writer, item.Parent);
            
            ok = ok && writer.Key("FileName");
            ok = ok && WriteJson(writer, item.FileName);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    using PortalFileListResultsPropertyResults = AZStd::vector<PortalFileInfo>;

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const PortalFileListResultsPropertyResults& list)
    {
        bool ok = true;
        ok = ok && writer.StartArray();
        for (auto item : list)
        {
            ok = ok && WriteJson(writer, item);
        }
        ok = ok && writer.EndArray();
        return ok;
    }
    
    
    
    struct PortalFileListResults
    {

        AZ_TYPE_INFO(PortalFileListResults, LmbrAWS_CodeGen_PortalFileListResults_UUID)
        AZ_CLASS_ALLOCATOR(PortalFileListResults, AZ::SystemAllocator, 0)

        
        PortalFileListResultsPropertyResults results;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const PortalFileListResults& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("results");
            ok = ok && WriteJson(writer, item.results);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    
    
    struct ServiceStatus
    {

        AZ_TYPE_INFO(ServiceStatus, LmbrAWS_CodeGen_ServiceStatus_UUID)
        AZ_CLASS_ALLOCATOR(ServiceStatus, AZ::SystemAllocator, 0)

        
        AZStd::string status;
        

        bool OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader);

        static void Reflect(AZ::ReflectContext* reflection);
    };

    bool WriteJson(CloudGemFramework::JsonWriter& writer, const ServiceStatus& item)
    {
            bool ok = true;
            ok = ok && writer.StartObject();
            
            ok = ok && writer.Key("status");
            ok = ok && WriteJson(writer, item.status);
            
            ok = ok && writer.EndObject();
            return ok;
    }
    
    


    // Service RequestJobs
    CLOUD_GEM_SERVICE(CloudGemDynamicContent);

    void Configure()
    {
        // Insert any necessary CloudGemFramework configuration here
    }
    
    class PostClientContentRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemDynamicContent, HttpMethod::HTTP_POST, "/client/content");

        struct Parameters
        {
            
            RequestData request_content;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                ok = ok && CloudGemDynamicContent::ServiceAPI::WriteJson(writer, request_content);
                
                return ok;
            }
        };

        
        FileRequestResults result;
        

        Parameters parameters;
    };


    using PostClientContentRequestJob = CloudGemFramework::ServiceRequestJob<PostClientContentRequest>;
    
    class PostPortalContentRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemDynamicContent, HttpMethod::HTTP_POST, "/portal/content");

        struct Parameters
        {
            
            PortalFileRequestList request_content;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                ok = ok && CloudGemDynamicContent::ServiceAPI::WriteJson(writer, request_content);
                
                return ok;
            }
        };

        
        PortalFileListResults result;
        

        Parameters parameters;
    };


    using PostPortalContentRequestJob = CloudGemFramework::ServiceRequestJob<PostPortalContentRequest>;
    
    class DeletePortalContentRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemDynamicContent, HttpMethod::HTTP_DELETE, "/portal/content");

        struct Parameters
        {
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        PortalFileRequestList result;
        

        Parameters parameters;
    };


    using DeletePortalContentRequestJob = CloudGemFramework::ServiceRequestJob<DeletePortalContentRequest>;
    
    class GetPortalContentRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemDynamicContent, HttpMethod::HTTP_GET, "/portal/content");

        struct Parameters
        {
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        PortalFileListResults result;
        

        Parameters parameters;
    };


    using GetPortalContentRequestJob = CloudGemFramework::ServiceRequestJob<GetPortalContentRequest>;
    
    class GetServiceStatusRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemDynamicContent, HttpMethod::HTTP_GET, "/service/status");

        struct Parameters
        {
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        ServiceStatus result;
        

        Parameters parameters;
    };


    using GetServiceStatusRequestJob = CloudGemFramework::ServiceRequestJob<GetServiceStatusRequest>;
    
    class DeletePortalInfoRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemDynamicContent, HttpMethod::HTTP_DELETE, "/portal/info/{file_name}");

        struct Parameters
        {
            
            AZStd::string file_name;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""file_name""}", file_name);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        PortalFileRequestList result;
        

        Parameters parameters;
    };


    using DeletePortalInfoRequestJob = CloudGemFramework::ServiceRequestJob<DeletePortalInfoRequest>;
    
    class GetPortalInfoRequest
        : public CloudGemFramework::ServiceRequest
    {
    public:
        SERVICE_REQUEST(CloudGemDynamicContent, HttpMethod::HTTP_GET, "/portal/info/{file_name}");

        struct Parameters
        {
            
            AZStd::string file_name;
            

            bool BuildRequest(CloudGemFramework::RequestBuilder& request)
            {
                bool ok = true;
                
                ok = ok && request.SetPathParameter("{""file_name""}", file_name);
                
                
                ok = ok && request.WriteJsonBodyParameter(*this);
                return ok;
            }

            bool WriteJson(CloudGemFramework::JsonWriter& writer) const
            {
                bool ok = true;
                
                return ok;
            }
        };

        
        PortalFileInfo result;
        

        Parameters parameters;
    };


    using GetPortalInfoRequestJob = CloudGemFramework::ServiceRequestJob<GetPortalInfoRequest>;
    


    // Notification bus for this component
    class CloudGemDynamicContentNotifications
        : public AZ::ComponentBus
    {
    public:
        // static const bool EnableEventQueue = true;
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnPostClientContentRequestSuccess(const FileRequestResults response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnPostClientContentRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnPostPortalContentRequestSuccess(const PortalFileListResults response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnPostPortalContentRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnDeletePortalContentRequestSuccess(const PortalFileRequestList response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnDeletePortalContentRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetPortalContentRequestSuccess(const PortalFileListResults response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetPortalContentRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetServiceStatusRequestSuccess(const ServiceStatus response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetServiceStatusRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnDeletePortalInfoRequestSuccess(const PortalFileRequestList response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnDeletePortalInfoRequestError(const CloudGemFramework::Error error) { }
        
        /**
         * Sent when the request is a success
         *
         * Params:
         *    jsonOutput:       The output receieved from the lambda call
         *    request:          The AWS Lambda request object
         */
        
        virtual void OnGetPortalInfoRequestSuccess(const PortalFileInfo response) { }
        

        /**
         * Sent when the request fails
         *
         * Params:
         *    error:           The output receieved from the lambda call,
         *                     could be function error or an issue with the request
         *    request:         The AWS Lambda request object
         */
        virtual void OnGetPortalInfoRequestError(const CloudGemFramework::Error error) { }
        
    };

    using CloudGemDynamicContentNotificationBus = AZ::EBus<CloudGemDynamicContentNotifications>;

    class BehaviorCloudGemDynamicContentNotificationBusHandler
        : public CloudGemDynamicContentNotificationBus::Handler, public AZ::BehaviorEBusHandler
    {
    public:
        AZ_EBUS_BEHAVIOR_BINDER(BehaviorCloudGemDynamicContentNotificationBusHandler, LmbrAWS_CodeGen_NotificationBus1_UUID, AZ::SystemAllocator
        
        , OnPostClientContentRequestSuccess
        , OnPostClientContentRequestError
        
        , OnPostPortalContentRequestSuccess
        , OnPostPortalContentRequestError
        
        , OnDeletePortalContentRequestSuccess
        , OnDeletePortalContentRequestError
        
        , OnGetPortalContentRequestSuccess
        , OnGetPortalContentRequestError
        
        , OnGetServiceStatusRequestSuccess
        , OnGetServiceStatusRequestError
        
        , OnDeletePortalInfoRequestSuccess
        , OnDeletePortalInfoRequestError
        
        , OnGetPortalInfoRequestSuccess
        , OnGetPortalInfoRequestError
        
        );
        
        
        void OnPostClientContentRequestSuccess(const FileRequestResults response) override
        {
            Call(FN_OnPostClientContentRequestSuccess, response);
        }
        
        void OnPostClientContentRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnPostClientContentRequestError, error);
        }
        
        
        void OnPostPortalContentRequestSuccess(const PortalFileListResults response) override
        {
            Call(FN_OnPostPortalContentRequestSuccess, response);
        }
        
        void OnPostPortalContentRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnPostPortalContentRequestError, error);
        }
        
        
        void OnDeletePortalContentRequestSuccess(const PortalFileRequestList response) override
        {
            Call(FN_OnDeletePortalContentRequestSuccess, response);
        }
        
        void OnDeletePortalContentRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnDeletePortalContentRequestError, error);
        }
        
        
        void OnGetPortalContentRequestSuccess(const PortalFileListResults response) override
        {
            Call(FN_OnGetPortalContentRequestSuccess, response);
        }
        
        void OnGetPortalContentRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnGetPortalContentRequestError, error);
        }
        
        
        void OnGetServiceStatusRequestSuccess(const ServiceStatus response) override
        {
            Call(FN_OnGetServiceStatusRequestSuccess, response);
        }
        
        void OnGetServiceStatusRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnGetServiceStatusRequestError, error);
        }
        
        
        void OnDeletePortalInfoRequestSuccess(const PortalFileRequestList response) override
        {
            Call(FN_OnDeletePortalInfoRequestSuccess, response);
        }
        
        void OnDeletePortalInfoRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnDeletePortalInfoRequestError, error);
        }
        
        
        void OnGetPortalInfoRequestSuccess(const PortalFileInfo response) override
        {
            Call(FN_OnGetPortalInfoRequestSuccess, response);
        }
        
        void OnGetPortalInfoRequestError(const CloudGemFramework::Error error) override
        {
            Call(FN_OnGetPortalInfoRequestError, error);
        }
        
    };
    class CloudGemDynamicContentResponseHandler;

    // Request bus for this component
    class CloudGemDynamicContentRequests
        : public AZ::ComponentBus
    {
    public:
        virtual ~CloudGemDynamicContentRequests() {}
        
        
        virtual void PostClientContent(const RequestData& request_content, CloudGemDynamicContentResponseHandler* responseHandler) { }
        
        
        
        virtual void PostPortalContent(const PortalFileRequestList& request_content, CloudGemDynamicContentResponseHandler* responseHandler) { }
        
        
        
        virtual void DeletePortalContent(CloudGemDynamicContentResponseHandler* responseHandler) { }
        
        
        
        virtual void GetPortalContent(CloudGemDynamicContentResponseHandler* responseHandler) { }
        
        
        
        virtual void GetServiceStatus(CloudGemDynamicContentResponseHandler* responseHandler) { }
        
        
        
        virtual void DeletePortalInfo(const AZStd::string& file_name, CloudGemDynamicContentResponseHandler* responseHandler) { }
        
        
        
        virtual void GetPortalInfo(const AZStd::string& file_name, CloudGemDynamicContentResponseHandler* responseHandler) { }
        
        
    };

    using CloudGemDynamicContentRequestBus = AZ::EBus<CloudGemDynamicContentRequests>;

    // This class is used as a parameter for all requests and throws the response on the CloudGemDynamicContentNotificationBus
    // Inherit from this to define custom behavior.
    class CloudGemDynamicContentResponseHandler
    {
    public:
        AZ_TYPE_INFO(CloudGemDynamicContentResponseHandler, LmbrAWS_CodeGen_ResponseHandler_UUID)
        AZ_CLASS_ALLOCATOR(CloudGemDynamicContentResponseHandler, AZ::SystemAllocator, 0)

        virtual ~CloudGemDynamicContentResponseHandler() {}
        
        virtual void HandlePostClientContentSuccess(PostClientContentRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnPostClientContentRequestSuccess, job->result);
            
        }

        virtual void HandlePostClientContentError(PostClientContentRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnPostClientContentRequestError, job->error);
        }
        
        virtual void HandlePostPortalContentSuccess(PostPortalContentRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnPostPortalContentRequestSuccess, job->result);
            
        }

        virtual void HandlePostPortalContentError(PostPortalContentRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnPostPortalContentRequestError, job->error);
        }
        
        virtual void HandleDeletePortalContentSuccess(DeletePortalContentRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnDeletePortalContentRequestSuccess, job->result);
            
        }

        virtual void HandleDeletePortalContentError(DeletePortalContentRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnDeletePortalContentRequestError, job->error);
        }
        
        virtual void HandleGetPortalContentSuccess(GetPortalContentRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnGetPortalContentRequestSuccess, job->result);
            
        }

        virtual void HandleGetPortalContentError(GetPortalContentRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnGetPortalContentRequestError, job->error);
        }
        
        virtual void HandleGetServiceStatusSuccess(GetServiceStatusRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnGetServiceStatusRequestSuccess, job->result);
            
        }

        virtual void HandleGetServiceStatusError(GetServiceStatusRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnGetServiceStatusRequestError, job->error);
        }
        
        virtual void HandleDeletePortalInfoSuccess(DeletePortalInfoRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnDeletePortalInfoRequestSuccess, job->result);
            
        }

        virtual void HandleDeletePortalInfoError(DeletePortalInfoRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnDeletePortalInfoRequestError, job->error);
        }
        
        virtual void HandleGetPortalInfoSuccess(GetPortalInfoRequestJob* job, AZ::EntityId entityId)
        {
            
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnGetPortalInfoRequestSuccess, job->result);
            
        }

        virtual void HandleGetPortalInfoError(GetPortalInfoRequestJob* job, AZ::EntityId entityId)
        {
            EBUS_EVENT_ID(entityId, CloudGemDynamicContentNotificationBus, OnGetPortalInfoRequestError, job->error);
        }
        
    };

    class CloudGemDynamicContentClientComponent
        : public AZ::Component
        , public CloudGemDynamicContentRequestBus::Handler
    {
    public:
        AZ_COMPONENT(CloudGemDynamicContentClientComponent, LmbrAWS_CodeGen_Component_UUID);
        virtual ~CloudGemDynamicContentClientComponent() = default;

        AZStd::shared_ptr<CloudGemDynamicContentResponseHandler> m_defaultResponseHandler;

        void Init() override
        {
            m_defaultResponseHandler = AZStd::make_shared<CloudGemDynamicContentResponseHandler>();
            CloudGemDynamicContent::ServiceAPI::Configure();
        }

        void Activate() override
        {
            CloudGemDynamicContentRequestBus::Handler::BusConnect(m_entity->GetId());
        }

        void Deactivate() override
        {
            CloudGemDynamicContentRequestBus::Handler::BusDisconnect();
        }

        static void Reflect(AZ::ReflectContext* reflection)
        {
            
            
            
            
            RequestData::Reflect(reflection);
            
            
            
            FileRequestResult::Reflect(reflection);
            
            
            
            
            
            FileRequestResults::Reflect(reflection);
            
            
            
            PortalFileRequest::Reflect(reflection);
            
            
            
            
            
            PortalFileRequestList::Reflect(reflection);
            
            
            
            PortalFileInfo::Reflect(reflection);
            
            
            
            
            
            PortalFileListResults::Reflect(reflection);
            
            
            
            ServiceStatus::Reflect(reflection);
            
            

            AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);
            if (serializeContext)
            {
                // we must include any fields we want to expose to the editor or lua in the serialize context
                serializeContext->Class<CloudGemDynamicContentClientComponent>()
                    ->Version(1);

                AZ::EditContext* editContext = serializeContext->GetEditContext();
                if (editContext)
                {
                    editContext->Class<CloudGemDynamicContentClientComponent>("CloudGemDynamicContentClientComponent", "CloudGemDynamicContent Component")
                        ->ClassElement(AZ::Edit::ClassElements::EditorData, "")
                            ->Attribute(AZ::Edit::Attributes::Category, "Cloud Canvas Gems")
                            ->Attribute(AZ::Edit::Attributes::AppearsInAddComponentMenu, AZ_CRC("Game"));
                }
            }

            AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
            if (behaviorContext)
            {
                behaviorContext->EBus<CloudGemDynamicContentRequestBus>("CloudGemDynamicContentRequestBus")
                    // one of these for each function
                    
                    ->Event("PostClientContent", &CloudGemDynamicContentRequestBus::Events::PostClientContent)
                    
                    ->Event("PostPortalContent", &CloudGemDynamicContentRequestBus::Events::PostPortalContent)
                    
                    ->Event("DeletePortalContent", &CloudGemDynamicContentRequestBus::Events::DeletePortalContent)
                    
                    ->Event("GetPortalContent", &CloudGemDynamicContentRequestBus::Events::GetPortalContent)
                    
                    ->Event("GetServiceStatus", &CloudGemDynamicContentRequestBus::Events::GetServiceStatus)
                    
                    ->Event("DeletePortalInfo", &CloudGemDynamicContentRequestBus::Events::DeletePortalInfo)
                    
                    ->Event("GetPortalInfo", &CloudGemDynamicContentRequestBus::Events::GetPortalInfo)
                    
                    ;
                behaviorContext->EBus<CloudGemDynamicContentNotificationBus>("CloudGemDynamicContentNotificationBus")
                    ->Handler<BehaviorCloudGemDynamicContentNotificationBusHandler>()
                ;
            }
        }

        // Functions from the swagger definitions
        
        
        void PostClientContent(const RequestData& request_content, CloudGemDynamicContentResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemDynamicContentResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            PostClientContentRequestJob* job = PostClientContentRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](PostClientContentRequestJob* job)
                {
                    // handle success
                    CloudGemDynamicContentResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandlePostClientContentSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](PostClientContentRequestJob* job)
                {
                    // handle error
                    CloudGemDynamicContentResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandlePostClientContentError(job, entityId);
                    }
                }
            );
            
            job->parameters.request_content = request_content;
            
            
            
            job->Start();
        }
        
        
        void PostPortalContent(const PortalFileRequestList& request_content, CloudGemDynamicContentResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemDynamicContentResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            PostPortalContentRequestJob* job = PostPortalContentRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](PostPortalContentRequestJob* job)
                {
                    // handle success
                    CloudGemDynamicContentResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandlePostPortalContentSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](PostPortalContentRequestJob* job)
                {
                    // handle error
                    CloudGemDynamicContentResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandlePostPortalContentError(job, entityId);
                    }
                }
            );
            
            job->parameters.request_content = request_content;
            
            
            
            job->Start();
        }
        
        
        void DeletePortalContent(CloudGemDynamicContentResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemDynamicContentResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            DeletePortalContentRequestJob* job = DeletePortalContentRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](DeletePortalContentRequestJob* job)
                {
                    // handle success
                    CloudGemDynamicContentResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleDeletePortalContentSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](DeletePortalContentRequestJob* job)
                {
                    // handle error
                    CloudGemDynamicContentResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleDeletePortalContentError(job, entityId);
                    }
                }
            );
            
            
            
            job->Start();
        }
        
        
        void GetPortalContent(CloudGemDynamicContentResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemDynamicContentResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            GetPortalContentRequestJob* job = GetPortalContentRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](GetPortalContentRequestJob* job)
                {
                    // handle success
                    CloudGemDynamicContentResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleGetPortalContentSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](GetPortalContentRequestJob* job)
                {
                    // handle error
                    CloudGemDynamicContentResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleGetPortalContentError(job, entityId);
                    }
                }
            );
            
            
            
            job->Start();
        }
        
        
        void GetServiceStatus(CloudGemDynamicContentResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemDynamicContentResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            GetServiceStatusRequestJob* job = GetServiceStatusRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](GetServiceStatusRequestJob* job)
                {
                    // handle success
                    CloudGemDynamicContentResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleGetServiceStatusSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](GetServiceStatusRequestJob* job)
                {
                    // handle error
                    CloudGemDynamicContentResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleGetServiceStatusError(job, entityId);
                    }
                }
            );
            
            
            
            job->Start();
        }
        
        
        void DeletePortalInfo(const AZStd::string& file_name, CloudGemDynamicContentResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemDynamicContentResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            DeletePortalInfoRequestJob* job = DeletePortalInfoRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](DeletePortalInfoRequestJob* job)
                {
                    // handle success
                    CloudGemDynamicContentResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleDeletePortalInfoSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](DeletePortalInfoRequestJob* job)
                {
                    // handle error
                    CloudGemDynamicContentResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleDeletePortalInfoError(job, entityId);
                    }
                }
            );
            
            
            job->parameters.file_name = file_name;
            
            
            job->Start();
        }
        
        
        void GetPortalInfo(const AZStd::string& file_name, CloudGemDynamicContentResponseHandler* responseHandler) override
        
        {
            // create job
            AZ::EntityId entityId;
            if (m_entity)
            {
                entityId = m_entity->GetId();
            }

            AZStd::shared_ptr < CloudGemDynamicContentResponseHandler > defaultResponseHandler = m_defaultResponseHandler;

            GetPortalInfoRequestJob* job = GetPortalInfoRequestJob::Create(
                [responseHandler, defaultResponseHandler, entityId](GetPortalInfoRequestJob* job)
                {
                    // handle success
                    CloudGemDynamicContentResponseHandler* successHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (successHandler)
                    {
                        successHandler->HandleGetPortalInfoSuccess(job, entityId);
                    }
                },
                [responseHandler, defaultResponseHandler, entityId](GetPortalInfoRequestJob* job)
                {
                    // handle error
                    CloudGemDynamicContentResponseHandler* failureHandler = responseHandler ? responseHandler : defaultResponseHandler.get();
                    if (failureHandler)
                    {
                        failureHandler->HandleGetPortalInfoError(job, entityId);
                    }
                }
            );
            
            
            job->parameters.file_name = file_name;
            
            
            job->Start();
        }
        

    };

    
    
    
    
    bool RequestData::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "FileList") == 0) return reader.Accept(FileList);
        
        return reader.Ignore();
    }

    void RequestData::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<RequestData>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<RequestData>("CloudGemDynamicContent_RequestData")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("FileList", BehaviorValueProperty(&RequestData::FileList))
            
            ;
        }
    }
    
    
    
    bool FileRequestResult::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "FileStatus") == 0) return reader.Accept(FileStatus);
        
        if (strcmp(key, "Signature") == 0) return reader.Accept(Signature);
        
        if (strcmp(key, "PresignedURL") == 0) return reader.Accept(PresignedURL);
        
        if (strcmp(key, "FileName") == 0) return reader.Accept(FileName);
        
        return reader.Ignore();
    }

    void FileRequestResult::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<FileRequestResult>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<FileRequestResult>("CloudGemDynamicContent_FileRequestResult")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("FileStatus", BehaviorValueProperty(&FileRequestResult::FileStatus))
            
                ->Property("Signature", BehaviorValueProperty(&FileRequestResult::Signature))
            
                ->Property("PresignedURL", BehaviorValueProperty(&FileRequestResult::PresignedURL))
            
                ->Property("FileName", BehaviorValueProperty(&FileRequestResult::FileName))
            
            ;
        }
    }
    
    
    
    
    
    bool FileRequestResults::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "ResultList") == 0) return reader.Accept(ResultList);
        
        return reader.Ignore();
    }

    void FileRequestResults::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<FileRequestResults>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<FileRequestResults>("CloudGemDynamicContent_FileRequestResults")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("ResultList", BehaviorValueProperty(&FileRequestResults::ResultList))
            
            ;
        }
    }
    
    
    
    bool PortalFileRequest::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "StagingEnd") == 0) return reader.Accept(StagingEnd);
        
        if (strcmp(key, "StagingStatus") == 0) return reader.Accept(StagingStatus);
        
        if (strcmp(key, "StagingStart") == 0) return reader.Accept(StagingStart);
        
        if (strcmp(key, "FileName") == 0) return reader.Accept(FileName);
        
        return reader.Ignore();
    }

    void PortalFileRequest::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<PortalFileRequest>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<PortalFileRequest>("CloudGemDynamicContent_PortalFileRequest")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("StagingEnd", BehaviorValueProperty(&PortalFileRequest::StagingEnd))
            
                ->Property("StagingStatus", BehaviorValueProperty(&PortalFileRequest::StagingStatus))
            
                ->Property("StagingStart", BehaviorValueProperty(&PortalFileRequest::StagingStart))
            
                ->Property("FileName", BehaviorValueProperty(&PortalFileRequest::FileName))
            
            ;
        }
    }
    
    
    
    
    
    bool PortalFileRequestList::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "FileList") == 0) return reader.Accept(FileList);
        
        return reader.Ignore();
    }

    void PortalFileRequestList::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<PortalFileRequestList>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<PortalFileRequestList>("CloudGemDynamicContent_PortalFileRequestList")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("FileList", BehaviorValueProperty(&PortalFileRequestList::FileList))
            
            ;
        }
    }
    
    
    
    bool PortalFileInfo::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "StagingEnd") == 0) return reader.Accept(StagingEnd);
        
        if (strcmp(key, "StagingStatus") == 0) return reader.Accept(StagingStatus);
        
        if (strcmp(key, "StagingStart") == 0) return reader.Accept(StagingStart);
        
        if (strcmp(key, "Parent") == 0) return reader.Accept(Parent);
        
        if (strcmp(key, "FileName") == 0) return reader.Accept(FileName);
        
        return reader.Ignore();
    }

    void PortalFileInfo::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<PortalFileInfo>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<PortalFileInfo>("CloudGemDynamicContent_PortalFileInfo")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("StagingEnd", BehaviorValueProperty(&PortalFileInfo::StagingEnd))
            
                ->Property("StagingStatus", BehaviorValueProperty(&PortalFileInfo::StagingStatus))
            
                ->Property("StagingStart", BehaviorValueProperty(&PortalFileInfo::StagingStart))
            
                ->Property("Parent", BehaviorValueProperty(&PortalFileInfo::Parent))
            
                ->Property("FileName", BehaviorValueProperty(&PortalFileInfo::FileName))
            
            ;
        }
    }
    
    
    
    
    
    bool PortalFileListResults::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "results") == 0) return reader.Accept(results);
        
        return reader.Ignore();
    }

    void PortalFileListResults::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<PortalFileListResults>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<PortalFileListResults>("CloudGemDynamicContent_PortalFileListResults")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("results", BehaviorValueProperty(&PortalFileListResults::results))
            
            ;
        }
    }
    
    
    
    bool ServiceStatus::OnJsonKey(const char* key, CloudGemFramework::JsonReader& reader)
    {
        
        if (strcmp(key, "status") == 0) return reader.Accept(status);
        
        return reader.Ignore();
    }

    void ServiceStatus::Reflect(AZ::ReflectContext* reflection)
    {
        AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(reflection);

        if (serializeContext)
        {
            serializeContext->Class<ServiceStatus>()
                ->Version(1);
        }

        AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(reflection);
        if (behaviorContext)
        {
            behaviorContext->Class<ServiceStatus>("CloudGemDynamicContent_ServiceStatus")
                ->Attribute(AZ::Script::Attributes::Storage, AZ::Script::Attributes::StorageType::Value)
            
                ->Property("status", BehaviorValueProperty(&ServiceStatus::status))
            
            ;
        }
    }
    
    
} // ServiceAPI
} // CloudGemDynamicContent